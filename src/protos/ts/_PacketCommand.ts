/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "DC.Packet";

export enum PacketCommand {
  PACKET_NONE = 0,
  C2S_ALIVE_REQ = 1,
  S2C_ALIVE_RES = 2,
  C2S_RECONNECT_REQ = 3,
  S2C_RECONNECT_RES = 4,
  C2S_ACCOUNT_LOGIN_REQ = 11,
  S2C_ACCOUNT_LOGIN_RES = 12,
  C2S_ACCOUNT_CHARACTER_CREATE_REQ = 15,
  S2C_ACCOUNT_CHARACTER_CREATE_RES = 16,
  C2S_ACCOUNT_CHARACTER_LIST_REQ = 17,
  S2C_ACCOUNT_CHARACTER_LIST_RES = 18,
  C2S_ACCOUNT_CHARACTER_DELETE_REQ = 19,
  S2C_ACCOUNT_CHARACTER_DELETE_RES = 20,
  C2S_LOBBY_ENTER_REQ = 21,
  S2C_LOBBY_ENTER_RES = 22,
  C2S_ACCOUNT_AGREE_ANSWER_REQ = 23,
  S2C_ACCOUNT_AGREE_ANSWER_RES = 24,
  C2S_CHARACTER_SELECT_ENTER_REQ = 41,
  S2C_CHARACTER_SELECT_ENTER_RES = 42,
  C2S_LOBBY_CHARACTER_INFO_REQ = 43,
  S2C_LOBBY_CHARACTER_INFO_RES = 44,
  C2S_OPEN_LOBBY_MAP_REQ = 45,
  S2C_OPEN_LOBBY_MAP_RES = 46,
  C2S_LOBBY_REGION_SELECT_REQ = 47,
  S2C_LOBBY_REGION_SELECT_RES = 48,
  C2S_LOBBY_ENTER_FROM_GAME_REQ = 49,
  S2C_LOBBY_ENTER_FROM_GAME_RES = 50,
  C2S_LOBBY_GAME_DIFFICULTY_SELECT_REQ = 51,
  S2C_LOBBY_GAME_DIFFICULTY_SELECT_RES = 52,
  S2C_LOBBY_ACCOUNT_CURRENCY_LIST_NOT = 53,
  S2C_LOBBY_CHARACTER_LOBBY_EMOTE_NOT = 54,
  S2C_LOBBY_REPORT_PUNISH_LIST_NOT = 55,
  C2S_LOBBY_ENTER_COUPON_CODE_REQ = 56,
  S2C_LOBBY_ENTER_COUPON_CODE_RES = 57,
  MIN_INVENTORY_PACKET = 500,
  C2S_INVENTORY_INFO_REQ = 501,
  S2C_INVENTORY_INFO_RES = 502,
  C2S_INVENTORY_ALL_UPDATE_REQ = 503,
  S2C_INVENTORY_ALL_UPDATE_RES = 504,
  C2S_INVENTORY_SINGLE_UPDATE_REQ = 505,
  S2C_INVENTORY_SINGLE_UPDATE_RES = 506,
  C2S_INVENTORY_MOVE_REQ = 507,
  S2C_INVENTORY_MOVE_RES = 508,
  C2S_INVENTORY_MERGE_REQ = 509,
  S2C_INVENTORY_MERGE_RES = 510,
  C2S_INVENTORY_SWAP_REQ = 511,
  S2C_INVENTORY_SWAP_RES = 512,
  C2S_INVENTORY_SPLIT_MOVE_REQ = 513,
  S2C_INVENTORY_SPLIT_MOVE_RES = 514,
  C2S_INVENTORY_SPLIT_MERGE_REQ = 515,
  S2C_INVENTORY_SPLIT_MERGE_RES = 516,
  C2S_INVENTORY_SPLIT_SWAP_REQ = 517,
  S2C_INVENTORY_SPLIT_SWAP_RES = 518,
  C2S_INVENTORY_TWO_HANDED_WEAPON_SWAP_REQ = 519,
  S2C_INVENTORY_TWO_HANDED_WEAPON_SWAP_RES = 520,
  C2S_STORAGE_INFO_REQ = 551,
  S2C_STORAGE_INFO_RES = 552,
  MAX_INVENTORY_PACKET = 600,
  C2S_AUTO_MATCH_REG_REQ = 751,
  S2C_AUTO_MATCH_REG_RES = 752,
  S2C_ENTER_GAME_SERVER_NOT = 753,
  C2S_GAME_ENTER_COMPLETE_NOT = 754,
  S2C_AUTO_MATCH_REG_TEAM_NOT = 755,
  C2S_RECONNECT_INGAME_REQ = 756,
  S2C_RECONNECT_INGAME_RES = 757,
  S2C_FLOOR_MATCHMAKED_NOT = 758,
  MIN_RANKING_PACKET = 800,
  C2S_RANKING_RANGE_REQ = 801,
  S2C_RANKING_RANGE_RES = 802,
  C2S_RANKING_NEARBY_REQ = 803,
  S2C_RANKING_NEARBY_RES = 804,
  C2S_RANKING_CHARACTER_REQ = 805,
  S2C_RANKING_CHARACTER_RES = 806,
  MAX_RANKING_PACKET = 830,
  MIN_FRIEND_PACKET = 900,
  C2S_FRIEND_LIST_REQ = 901,
  S2C_FRIEND_LIST_RES = 902,
  C2S_FRIEND_LIST_ALL_REQ = 903,
  S2C_FRIEND_LIST_ALL_RES = 904,
  C2S_FRIEND_FIND_REQ = 905,
  S2C_FRIEND_FIND_RES = 906,
  MAX_FRIEND_PACKET = 950,
  MIN_PARTY_PACKET = 1000,
  C2S_PARTY_INVITE_REQ = 1001,
  S2C_PARTY_INVITE_RES = 1002,
  S2C_PARTY_INVITE_NOT = 1003,
  C2S_PARTY_INVITE_ANSWER_REQ = 1004,
  S2C_PARTY_INVITE_ANSWER_RES = 1005,
  S2C_PARTY_INVITE_ANSWER_RESULT_NOT = 1006,
  C2S_PARTY_EXIT_REQ = 1007,
  S2C_PARTY_EXIT_RES = 1008,
  S2C_PARTY_MEMBER_INFO_NOT = 1009,
  C2S_PARTY_READY_REQ = 1010,
  S2C_PARTY_READY_RES = 1011,
  S2C_PARTY_EQUIP_ITEM_CHANGE_NOT = 1012,
  S2C_PARTY_REGION_CHANGE_NOT = 1013,
  S2C_PARTY_LOCATION_UPDATE_NOT = 1014,
  S2C_PARTY_CHARACTER_SKIN_LIST_NOT = 1015,
  S2C_PARTY_CHARACTER_SKIN_CHANGE_NOT = 1016,
  S2C_PARTY_ITEM_SKIN_LIST_NOT = 1017,
  S2C_PARTY_ITEM_SKIN_CHANGE_NOT = 1018,
  S2C_PARTY_GAME_DIFFICULTY_CHANGE_NOT = 1019,
  C2S_PARTY_MEMBER_KICK_REQ = 1020,
  S2C_PARTY_MEMBER_KICK_RES = 1021,
  C2S_PARTY_CHAT_REQ = 1022,
  S2C_PARTY_CHAT_RES = 1023,
  S2C_PARTY_CHAT_NOT = 1024,
  S2C_PARTY_READY_CHANGE_NOT = 1025,
  S2C_PARTY_KICKED_OUT_NOT = 1026,
  S2C_PARTY_MEMBER_LOBBY_EMOTE_NOT = 1027,
  C2S_PARTY_START_LOBBY_EMOTE_REQ = 1028,
  S2C_PARTY_START_LOBBY_EMOTE_RES = 1029,
  S2C_PARTY_START_LOBBY_EMOTE_NOT = 1030,
  MAX_PARTY_PACKET = 1150,
  MIN_GM_PACKET = 1200,
  C2S_GM_PARTY_ALL_RANDOM_REQ = 1201,
  S2C_GM_PARTY_ALL_RANDOM_RES = 1202,
  C2S_GM_ENTER_GAME_SPECTATOR_REQ = 1203,
  S2C_GM_ENTER_GAME_SPECTATOR_RES = 1204,
  MAX_GM_PACKET = 1300,
  MIN_MERCHANT_PACKET = 1350,
  C2S_MERCHANT_LIST_REQ = 1351,
  S2C_MERCHANT_LIST_RES = 1352,
  C2S_MERCHANT_STOCK_BUY_ITEM_LIST_REQ = 1353,
  S2C_MERCHANT_STOCK_BUY_ITEM_LIST_RES = 1354,
  C2S_MERCHANT_STOCK_SELL_BACK_ITEM_LIST_REQ = 1355,
  S2C_MERCHANT_STOCK_SELL_BACK_ITEM_LIST_RES = 1356,
  C2S_MERCHANT_STOCK_BUY_REQ = 1357,
  S2C_MERCHANT_STOCK_BUY_RES = 1358,
  C2S_MERCHANT_STOCK_SELL_BACK_REQ = 1359,
  S2C_MERCHANT_STOCK_SELL_BACK_RES = 1360,
  C2S_MERCHANT_SERVICE_CRAFT_LIST_REQ = 1361,
  S2C_MERCHANT_SERVICE_CRAFT_LIST_RES = 1362,
  C2S_MERCHANT_SERVICE_CRAFT_REQ = 1363,
  S2C_MERCHANT_SERVICE_CRAFT_RES = 1364,
  C2S_MERCHANT_SERVICE_REPAIR_REQ = 1365,
  S2C_MERCHANT_SERVICE_REPAIR_RES = 1366,
  C2S_MERCHANT_QUEST_LIST_REQ = 1367,
  S2C_MERCHANT_QUEST_LIST_RES = 1368,
  C2S_MERCHANT_QUEST_REQ = 1369,
  S2C_MERCHANT_QUEST_RES = 1370,
  MAX_MERCHANT_PACKET = 1600,
  MIN_KARMA_PACKET = 1650,
  C2S_KARMA_REPORT_LIST_REQ = 1651,
  S2C_KARMA_REPORT_LIST_RES = 1652,
  C2S_KARMA_REPORT_ACTION_REQ = 1653,
  S2C_KARMA_REPORT_ACTION_RES = 1654,
  S2C_KARMA_RATING_UPDATE_NOT = 1655,
  MAX_KARMA_PACKET = 1700,
  MIN_TRADE_PACKET = 2000,
  C2S_TRADE_CHANNEL_LIST_REQ = 2001,
  S2C_TRADE_CHANNEL_LIST_RES = 2002,
  C2S_TRADE_CHANNEL_SELECT_REQ = 2003,
  S2C_TRADE_CHANNEL_SELECT_RES = 2004,
  C2S_TRADE_CHANNEL_EXIT_REQ = 2005,
  S2C_TRADE_CHANNEL_EXIT_RES = 2006,
  C2S_TRADE_CHANNEL_USER_LIST_REQ = 2007,
  S2C_TRADE_CHANNEL_USER_LIST_RES = 2008,
  S2C_TRADE_CHANNEL_USER_UPDATE_NOT = 2009,
  C2S_TRADE_CHANNEL_CHAT_REQ = 2011,
  S2C_TRADE_CHANNEL_CHAT_RES = 2012,
  C2S_TRADE_CHANNEL_CHAT_TEXT_RANGE_REQ = 2013,
  S2C_TRADE_CHANNEL_CHAT_TEXT_RANGE_RES = 2014,
  C2S_TRADE_MEMBERSHIP_REQUIREMENT_REQ = 2030,
  S2C_TRADE_MEMBERSHIP_REQUIREMENT_RES = 2031,
  C2S_TRADE_MEMBERSHIP_REQ = 2032,
  S2C_TRADE_MEMBERSHIP_RES = 2033,
  C2S_TRADE_REQUEST_REQ = 2034,
  S2C_TRADE_REQUEST_RES = 2035,
  S2C_TRADE_REQUEST_NOT = 2036,
  C2S_TRADE_ANSWER_REQ = 2037,
  S2C_TRADE_ANSWER_RES = 2038,
  S2C_TRADE_ANSWER_REFUSAL_NOT = 2039,
  S2C_TRADING_BEGIN_NOT = 2050,
  C2S_TRADING_CLOSE_REQ = 2051,
  S2C_TRADING_CLOSE_RES = 2052,
  C2S_TRADING_CHAT_REQ = 2053,
  S2C_TRADING_CHAT_RES = 2054,
  C2S_TRADING_ITEM_UPDATE_REQ = 2055,
  S2C_TRADING_ITEM_UPDATE_RES = 2056,
  C2S_TRADING_READY_REQ = 2057,
  S2C_TRADING_READY_RES = 2058,
  S2C_TRADING_READY_NOT = 2059,
  S2C_TRADING_CONFIRM_NOT = 2060,
  C2S_TRADING_CONFIRM_READY_REQ = 2061,
  S2C_TRADING_CONFIRM_READY_RES = 2062,
  S2C_TRADING_CONFIRM_READY_NOT = 2063,
  C2S_TRADING_CONFIRM_CANCEL_REQ = 2064,
  S2C_TRADING_CONFIRM_CANCEL_RES = 2065,
  S2C_TRADING_RESULT_NOT = 2066,
  MAX_TRADE_PACKET = 2300,
  MIN_CUSTOMIZE_PACKET = 2330,
  C2S_CUSTOMIZE_NEW_ITEM_CHECK_REQ = 2331,
  S2C_CUSTOMIZE_NEW_ITEM_CHECK_RES = 2332,
  S2C_CUSTOMIZE_NEW_ITEM_ALERT_NOT = 2333,
  C2S_CUSTOMIZE_CHARACTER_INFO_REQ = 2351,
  S2C_CUSTOMIZE_CHARACTER_INFO_RES = 2352,
  C2S_CUSTOMIZE_ITEM_INFO_REQ = 2353,
  S2C_CUSTOMIZE_ITEM_INFO_RES = 2354,
  C2S_CUSTOMIZE_EMOTE_INFO_REQ = 2355,
  S2C_CUSTOMIZE_EMOTE_INFO_RES = 2356,
  C2S_CUSTOMIZE_ACTION_INFO_REQ = 2357,
  S2C_CUSTOMIZE_ACTION_INFO_RES = 2358,
  C2S_CUSTOMIZE_LOBBY_EMOTE_INFO_REQ = 2359,
  S2C_CUSTOMIZE_LOBBY_EMOTE_INFO_RES = 2360,
  C2S_CUSTOMIZE_CHARACTER_MOUNT_REQ = 2370,
  S2C_CUSTOMIZE_CHARACTER_MOUNT_RES = 2371,
  C2S_CUSTOMIZE_CHARACTER_UNMOUNT_REQ = 2372,
  S2C_CUSTOMIZE_CHARACTER_UNMOUNT_RES = 2373,
  C2S_CUSTOMIZE_ITEM_MOUNT_REQ = 2380,
  S2C_CUSTOMIZE_ITEM_MOUNT_RES = 2381,
  C2S_CUSTOMIZE_ITEM_UNMOUNT_REQ = 2382,
  S2C_CUSTOMIZE_ITEM_UNMOUNT_RES = 2383,
  C2S_CUSTOMIZE_EMOTE_MOUNT_REQ = 2390,
  S2C_CUSTOMIZE_EMOTE_MOUNT_RES = 2391,
  C2S_CUSTOMIZE_EMOTE_UNMOUNT_REQ = 2392,
  S2C_CUSTOMIZE_EMOTE_UNMOUNT_RES = 2393,
  C2S_CUSTOMIZE_ACTION_MOUNT_REQ = 2400,
  S2C_CUSTOMIZE_ACTION_MOUNT_RES = 2401,
  C2S_CUSTOMIZE_ACTION_UNMOUNT_REQ = 2402,
  S2C_CUSTOMIZE_ACTION_UNMOUNT_RES = 2403,
  C2S_CUSTOMIZE_LOBBY_EMOTE_MOUNT_REQ = 2410,
  S2C_CUSTOMIZE_LOBBY_EMOTE_MOUNT_RES = 2411,
  C2S_CUSTOMIZE_LOBBY_EMOTE_UNMOUNT_REQ = 2412,
  S2C_CUSTOMIZE_LOBBY_EMOTE_UNMOUNT_RES = 2413,
  MAX_CUSTOMIZE_PACKET = 2450,
  MIN_SHOP_PACKET = 2501,
  C2S_SHOP_CHARACTER_SKIN_LIST_REQ = 2502,
  S2C_SHOP_CHARACTER_SKIN_LIST_RES = 2503,
  C2S_SHOP_ITEM_SKIN_LIST_REQ = 2504,
  S2C_SHOP_ITEM_SKIN_LIST_RES = 2505,
  C2S_SHOP_EMOTE_LIST_REQ = 2506,
  S2C_SHOP_EMOTE_LIST_RES = 2507,
  C2S_SHOP_ACTION_LIST_REQ = 2508,
  S2C_SHOP_ACTION_LIST_RES = 2509,
  C2S_SHOP_LOBBY_EMOTE_LIST_REQ = 2510,
  S2C_SHOP_LOBBY_EMOTE_LIST_RES = 2511,
  C2S_SHOP_CHARACTER_SKIN_BUY_REQ = 2520,
  S2C_SHOP_CHARACTER_SKIN_BUY_RES = 2521,
  C2S_SHOP_ITEM_SKIN_BUY_REQ = 2522,
  S2C_SHOP_ITEM_SKIN_BUY_RES = 2523,
  C2S_SHOP_EMOTE_BUY_REQ = 2524,
  S2C_SHOP_EMOTE_BUY_RES = 2525,
  C2S_SHOP_ACTION_BUY_REQ = 2526,
  S2C_SHOP_ACTION_BUY_RES = 2527,
  C2S_SHOP_LOBBY_EMOTE_BUY_REQ = 2528,
  S2C_SHOP_LOBBY_EMOTE_BUY_RES = 2529,
  MAX_SHOP_PACKET = 2600,
  MIN_CLASS_PACKET = 3000,
  C2S_CLASS_LEVEL_INFO_REQ = 3001,
  S2C_CLASS_LEVEL_INFO_RES = 3002,
  C2S_CLASS_EQUIP_INFO_REQ = 3031,
  S2C_CLASS_EQUIP_INFO_RES = 3032,
  C2S_CLASS_PERK_LIST_REQ = 3041,
  S2C_CLASS_PERK_LIST_RES = 3042,
  C2S_CLASS_SKILL_LIST_REQ = 3043,
  S2C_CLASS_SKILL_LIST_RES = 3044,
  C2S_CLASS_SPELL_LIST_REQ = 3045,
  S2C_CLASS_SPELL_LIST_RES = 3046,
  C2S_CLASS_ITEM_MOVE_REQ = 3051,
  S2C_CLASS_ITEM_MOVE_RES = 3052,
  C2S_CLASS_SPELL_SLOT_MOVE_REQ = 3053,
  S2C_CLASS_SPELL_SLOT_MOVE_RES = 3054,
  C2S_CLASS_SPELL_SEQUENCE_CHANGE_REQ = 3055,
  S2C_CLASS_SPELL_SEQUENCE_CHANGE_RES = 3056,
  MAX_CLASS_PACKET = 3100,
  MIN_GATHERING_HALL_PACKET = 3200,
  C2S_GATHERING_HALL_CHANNEL_LIST_REQ = 3201,
  S2C_GATHERING_HALL_CHANNEL_LIST_RES = 3202,
  C2S_GATHERING_HALL_CHANNEL_SELECT_REQ = 3203,
  S2C_GATHERING_HALL_CHANNEL_SELECT_RES = 3204,
  C2S_GATHERING_HALL_CHANNEL_EXIT_REQ = 3205,
  S2C_GATHERING_HALL_CHANNEL_EXIT_RES = 3206,
  C2S_GATHERING_HALL_CHANNEL_USER_LIST_REQ = 3207,
  S2C_GATHERING_HALL_CHANNEL_USER_LIST_RES = 3208,
  S2C_GATHERING_HALL_CHANNEL_USER_UPDATE_NOT = 3209,
  C2S_GATHERING_HALL_CHANNEL_CHAT_REQ = 3220,
  S2C_GATHERING_HALL_CHANNEL_CHAT_RES = 3221,
  S2C_GATHERING_HALL_CHANNEL_CHAT_NOT = 3222,
  C2S_GATHERING_HALL_TARGET_EQUIPPED_ITEM_REQ = 3230,
  S2C_GATHERING_HALL_TARGET_EQUIPPED_ITEM_RES = 3231,
  MAX_GATHERING_HALL_PACKET = 3300,
  MIN_META_PACKET = 10000,
  C2S_META_LOCATION_REQ = 10001,
  S2C_META_LOCATION_RES = 10002,
  C2S_BLOCK_CHARACTER_REQ = 10010,
  S2C_BLOCK_CHARACTER_RES = 10011,
  C2S_UNBLOCK_CHARACTER_REQ = 10012,
  S2C_UNBLOCK_CHARACTER_RES = 10013,
  C2S_BLOCK_CHARACTER_LIST_REQ = 10014,
  S2C_BLOCK_CHARACTER_LIST_RES = 10015,
  C2S_HACK_LOG_REQ = 10030,
  S2C_HACK_LOG_RES = 10031,
  S2C_SERVICE_POLICY_NOT = 10050,
  S2C_HACK_CHECK_DLL_LIST_NOT = 10051,
  C2S_RE_LOGIN_REQ = 10060,
  S2C_RE_LOGIN_RES = 10061,
  S2C_CLOSED_GAME_NOT = 10062,
  C2S_USER_CHARACTER_INFO_REQ = 10080,
  S2C_USER_CHARACTER_INFO_RES = 10081,
  S2C_OPERATE_ANNOUNCE_NOT = 10500,
  MAX_META_PACKET = 11000,
  UNRECOGNIZED = -1,
}

export function packetCommandFromJSON(object: any): PacketCommand {
  switch (object) {
    case 0:
    case "PACKET_NONE":
      return PacketCommand.PACKET_NONE;
    case 1:
    case "C2S_ALIVE_REQ":
      return PacketCommand.C2S_ALIVE_REQ;
    case 2:
    case "S2C_ALIVE_RES":
      return PacketCommand.S2C_ALIVE_RES;
    case 3:
    case "C2S_RECONNECT_REQ":
      return PacketCommand.C2S_RECONNECT_REQ;
    case 4:
    case "S2C_RECONNECT_RES":
      return PacketCommand.S2C_RECONNECT_RES;
    case 11:
    case "C2S_ACCOUNT_LOGIN_REQ":
      return PacketCommand.C2S_ACCOUNT_LOGIN_REQ;
    case 12:
    case "S2C_ACCOUNT_LOGIN_RES":
      return PacketCommand.S2C_ACCOUNT_LOGIN_RES;
    case 15:
    case "C2S_ACCOUNT_CHARACTER_CREATE_REQ":
      return PacketCommand.C2S_ACCOUNT_CHARACTER_CREATE_REQ;
    case 16:
    case "S2C_ACCOUNT_CHARACTER_CREATE_RES":
      return PacketCommand.S2C_ACCOUNT_CHARACTER_CREATE_RES;
    case 17:
    case "C2S_ACCOUNT_CHARACTER_LIST_REQ":
      return PacketCommand.C2S_ACCOUNT_CHARACTER_LIST_REQ;
    case 18:
    case "S2C_ACCOUNT_CHARACTER_LIST_RES":
      return PacketCommand.S2C_ACCOUNT_CHARACTER_LIST_RES;
    case 19:
    case "C2S_ACCOUNT_CHARACTER_DELETE_REQ":
      return PacketCommand.C2S_ACCOUNT_CHARACTER_DELETE_REQ;
    case 20:
    case "S2C_ACCOUNT_CHARACTER_DELETE_RES":
      return PacketCommand.S2C_ACCOUNT_CHARACTER_DELETE_RES;
    case 21:
    case "C2S_LOBBY_ENTER_REQ":
      return PacketCommand.C2S_LOBBY_ENTER_REQ;
    case 22:
    case "S2C_LOBBY_ENTER_RES":
      return PacketCommand.S2C_LOBBY_ENTER_RES;
    case 23:
    case "C2S_ACCOUNT_AGREE_ANSWER_REQ":
      return PacketCommand.C2S_ACCOUNT_AGREE_ANSWER_REQ;
    case 24:
    case "S2C_ACCOUNT_AGREE_ANSWER_RES":
      return PacketCommand.S2C_ACCOUNT_AGREE_ANSWER_RES;
    case 41:
    case "C2S_CHARACTER_SELECT_ENTER_REQ":
      return PacketCommand.C2S_CHARACTER_SELECT_ENTER_REQ;
    case 42:
    case "S2C_CHARACTER_SELECT_ENTER_RES":
      return PacketCommand.S2C_CHARACTER_SELECT_ENTER_RES;
    case 43:
    case "C2S_LOBBY_CHARACTER_INFO_REQ":
      return PacketCommand.C2S_LOBBY_CHARACTER_INFO_REQ;
    case 44:
    case "S2C_LOBBY_CHARACTER_INFO_RES":
      return PacketCommand.S2C_LOBBY_CHARACTER_INFO_RES;
    case 45:
    case "C2S_OPEN_LOBBY_MAP_REQ":
      return PacketCommand.C2S_OPEN_LOBBY_MAP_REQ;
    case 46:
    case "S2C_OPEN_LOBBY_MAP_RES":
      return PacketCommand.S2C_OPEN_LOBBY_MAP_RES;
    case 47:
    case "C2S_LOBBY_REGION_SELECT_REQ":
      return PacketCommand.C2S_LOBBY_REGION_SELECT_REQ;
    case 48:
    case "S2C_LOBBY_REGION_SELECT_RES":
      return PacketCommand.S2C_LOBBY_REGION_SELECT_RES;
    case 49:
    case "C2S_LOBBY_ENTER_FROM_GAME_REQ":
      return PacketCommand.C2S_LOBBY_ENTER_FROM_GAME_REQ;
    case 50:
    case "S2C_LOBBY_ENTER_FROM_GAME_RES":
      return PacketCommand.S2C_LOBBY_ENTER_FROM_GAME_RES;
    case 51:
    case "C2S_LOBBY_GAME_DIFFICULTY_SELECT_REQ":
      return PacketCommand.C2S_LOBBY_GAME_DIFFICULTY_SELECT_REQ;
    case 52:
    case "S2C_LOBBY_GAME_DIFFICULTY_SELECT_RES":
      return PacketCommand.S2C_LOBBY_GAME_DIFFICULTY_SELECT_RES;
    case 53:
    case "S2C_LOBBY_ACCOUNT_CURRENCY_LIST_NOT":
      return PacketCommand.S2C_LOBBY_ACCOUNT_CURRENCY_LIST_NOT;
    case 54:
    case "S2C_LOBBY_CHARACTER_LOBBY_EMOTE_NOT":
      return PacketCommand.S2C_LOBBY_CHARACTER_LOBBY_EMOTE_NOT;
    case 55:
    case "S2C_LOBBY_REPORT_PUNISH_LIST_NOT":
      return PacketCommand.S2C_LOBBY_REPORT_PUNISH_LIST_NOT;
    case 56:
    case "C2S_LOBBY_ENTER_COUPON_CODE_REQ":
      return PacketCommand.C2S_LOBBY_ENTER_COUPON_CODE_REQ;
    case 57:
    case "S2C_LOBBY_ENTER_COUPON_CODE_RES":
      return PacketCommand.S2C_LOBBY_ENTER_COUPON_CODE_RES;
    case 500:
    case "MIN_INVENTORY_PACKET":
      return PacketCommand.MIN_INVENTORY_PACKET;
    case 501:
    case "C2S_INVENTORY_INFO_REQ":
      return PacketCommand.C2S_INVENTORY_INFO_REQ;
    case 502:
    case "S2C_INVENTORY_INFO_RES":
      return PacketCommand.S2C_INVENTORY_INFO_RES;
    case 503:
    case "C2S_INVENTORY_ALL_UPDATE_REQ":
      return PacketCommand.C2S_INVENTORY_ALL_UPDATE_REQ;
    case 504:
    case "S2C_INVENTORY_ALL_UPDATE_RES":
      return PacketCommand.S2C_INVENTORY_ALL_UPDATE_RES;
    case 505:
    case "C2S_INVENTORY_SINGLE_UPDATE_REQ":
      return PacketCommand.C2S_INVENTORY_SINGLE_UPDATE_REQ;
    case 506:
    case "S2C_INVENTORY_SINGLE_UPDATE_RES":
      return PacketCommand.S2C_INVENTORY_SINGLE_UPDATE_RES;
    case 507:
    case "C2S_INVENTORY_MOVE_REQ":
      return PacketCommand.C2S_INVENTORY_MOVE_REQ;
    case 508:
    case "S2C_INVENTORY_MOVE_RES":
      return PacketCommand.S2C_INVENTORY_MOVE_RES;
    case 509:
    case "C2S_INVENTORY_MERGE_REQ":
      return PacketCommand.C2S_INVENTORY_MERGE_REQ;
    case 510:
    case "S2C_INVENTORY_MERGE_RES":
      return PacketCommand.S2C_INVENTORY_MERGE_RES;
    case 511:
    case "C2S_INVENTORY_SWAP_REQ":
      return PacketCommand.C2S_INVENTORY_SWAP_REQ;
    case 512:
    case "S2C_INVENTORY_SWAP_RES":
      return PacketCommand.S2C_INVENTORY_SWAP_RES;
    case 513:
    case "C2S_INVENTORY_SPLIT_MOVE_REQ":
      return PacketCommand.C2S_INVENTORY_SPLIT_MOVE_REQ;
    case 514:
    case "S2C_INVENTORY_SPLIT_MOVE_RES":
      return PacketCommand.S2C_INVENTORY_SPLIT_MOVE_RES;
    case 515:
    case "C2S_INVENTORY_SPLIT_MERGE_REQ":
      return PacketCommand.C2S_INVENTORY_SPLIT_MERGE_REQ;
    case 516:
    case "S2C_INVENTORY_SPLIT_MERGE_RES":
      return PacketCommand.S2C_INVENTORY_SPLIT_MERGE_RES;
    case 517:
    case "C2S_INVENTORY_SPLIT_SWAP_REQ":
      return PacketCommand.C2S_INVENTORY_SPLIT_SWAP_REQ;
    case 518:
    case "S2C_INVENTORY_SPLIT_SWAP_RES":
      return PacketCommand.S2C_INVENTORY_SPLIT_SWAP_RES;
    case 519:
    case "C2S_INVENTORY_TWO_HANDED_WEAPON_SWAP_REQ":
      return PacketCommand.C2S_INVENTORY_TWO_HANDED_WEAPON_SWAP_REQ;
    case 520:
    case "S2C_INVENTORY_TWO_HANDED_WEAPON_SWAP_RES":
      return PacketCommand.S2C_INVENTORY_TWO_HANDED_WEAPON_SWAP_RES;
    case 551:
    case "C2S_STORAGE_INFO_REQ":
      return PacketCommand.C2S_STORAGE_INFO_REQ;
    case 552:
    case "S2C_STORAGE_INFO_RES":
      return PacketCommand.S2C_STORAGE_INFO_RES;
    case 600:
    case "MAX_INVENTORY_PACKET":
      return PacketCommand.MAX_INVENTORY_PACKET;
    case 751:
    case "C2S_AUTO_MATCH_REG_REQ":
      return PacketCommand.C2S_AUTO_MATCH_REG_REQ;
    case 752:
    case "S2C_AUTO_MATCH_REG_RES":
      return PacketCommand.S2C_AUTO_MATCH_REG_RES;
    case 753:
    case "S2C_ENTER_GAME_SERVER_NOT":
      return PacketCommand.S2C_ENTER_GAME_SERVER_NOT;
    case 754:
    case "C2S_GAME_ENTER_COMPLETE_NOT":
      return PacketCommand.C2S_GAME_ENTER_COMPLETE_NOT;
    case 755:
    case "S2C_AUTO_MATCH_REG_TEAM_NOT":
      return PacketCommand.S2C_AUTO_MATCH_REG_TEAM_NOT;
    case 756:
    case "C2S_RECONNECT_INGAME_REQ":
      return PacketCommand.C2S_RECONNECT_INGAME_REQ;
    case 757:
    case "S2C_RECONNECT_INGAME_RES":
      return PacketCommand.S2C_RECONNECT_INGAME_RES;
    case 758:
    case "S2C_FLOOR_MATCHMAKED_NOT":
      return PacketCommand.S2C_FLOOR_MATCHMAKED_NOT;
    case 800:
    case "MIN_RANKING_PACKET":
      return PacketCommand.MIN_RANKING_PACKET;
    case 801:
    case "C2S_RANKING_RANGE_REQ":
      return PacketCommand.C2S_RANKING_RANGE_REQ;
    case 802:
    case "S2C_RANKING_RANGE_RES":
      return PacketCommand.S2C_RANKING_RANGE_RES;
    case 803:
    case "C2S_RANKING_NEARBY_REQ":
      return PacketCommand.C2S_RANKING_NEARBY_REQ;
    case 804:
    case "S2C_RANKING_NEARBY_RES":
      return PacketCommand.S2C_RANKING_NEARBY_RES;
    case 805:
    case "C2S_RANKING_CHARACTER_REQ":
      return PacketCommand.C2S_RANKING_CHARACTER_REQ;
    case 806:
    case "S2C_RANKING_CHARACTER_RES":
      return PacketCommand.S2C_RANKING_CHARACTER_RES;
    case 830:
    case "MAX_RANKING_PACKET":
      return PacketCommand.MAX_RANKING_PACKET;
    case 900:
    case "MIN_FRIEND_PACKET":
      return PacketCommand.MIN_FRIEND_PACKET;
    case 901:
    case "C2S_FRIEND_LIST_REQ":
      return PacketCommand.C2S_FRIEND_LIST_REQ;
    case 902:
    case "S2C_FRIEND_LIST_RES":
      return PacketCommand.S2C_FRIEND_LIST_RES;
    case 903:
    case "C2S_FRIEND_LIST_ALL_REQ":
      return PacketCommand.C2S_FRIEND_LIST_ALL_REQ;
    case 904:
    case "S2C_FRIEND_LIST_ALL_RES":
      return PacketCommand.S2C_FRIEND_LIST_ALL_RES;
    case 905:
    case "C2S_FRIEND_FIND_REQ":
      return PacketCommand.C2S_FRIEND_FIND_REQ;
    case 906:
    case "S2C_FRIEND_FIND_RES":
      return PacketCommand.S2C_FRIEND_FIND_RES;
    case 950:
    case "MAX_FRIEND_PACKET":
      return PacketCommand.MAX_FRIEND_PACKET;
    case 1000:
    case "MIN_PARTY_PACKET":
      return PacketCommand.MIN_PARTY_PACKET;
    case 1001:
    case "C2S_PARTY_INVITE_REQ":
      return PacketCommand.C2S_PARTY_INVITE_REQ;
    case 1002:
    case "S2C_PARTY_INVITE_RES":
      return PacketCommand.S2C_PARTY_INVITE_RES;
    case 1003:
    case "S2C_PARTY_INVITE_NOT":
      return PacketCommand.S2C_PARTY_INVITE_NOT;
    case 1004:
    case "C2S_PARTY_INVITE_ANSWER_REQ":
      return PacketCommand.C2S_PARTY_INVITE_ANSWER_REQ;
    case 1005:
    case "S2C_PARTY_INVITE_ANSWER_RES":
      return PacketCommand.S2C_PARTY_INVITE_ANSWER_RES;
    case 1006:
    case "S2C_PARTY_INVITE_ANSWER_RESULT_NOT":
      return PacketCommand.S2C_PARTY_INVITE_ANSWER_RESULT_NOT;
    case 1007:
    case "C2S_PARTY_EXIT_REQ":
      return PacketCommand.C2S_PARTY_EXIT_REQ;
    case 1008:
    case "S2C_PARTY_EXIT_RES":
      return PacketCommand.S2C_PARTY_EXIT_RES;
    case 1009:
    case "S2C_PARTY_MEMBER_INFO_NOT":
      return PacketCommand.S2C_PARTY_MEMBER_INFO_NOT;
    case 1010:
    case "C2S_PARTY_READY_REQ":
      return PacketCommand.C2S_PARTY_READY_REQ;
    case 1011:
    case "S2C_PARTY_READY_RES":
      return PacketCommand.S2C_PARTY_READY_RES;
    case 1012:
    case "S2C_PARTY_EQUIP_ITEM_CHANGE_NOT":
      return PacketCommand.S2C_PARTY_EQUIP_ITEM_CHANGE_NOT;
    case 1013:
    case "S2C_PARTY_REGION_CHANGE_NOT":
      return PacketCommand.S2C_PARTY_REGION_CHANGE_NOT;
    case 1014:
    case "S2C_PARTY_LOCATION_UPDATE_NOT":
      return PacketCommand.S2C_PARTY_LOCATION_UPDATE_NOT;
    case 1015:
    case "S2C_PARTY_CHARACTER_SKIN_LIST_NOT":
      return PacketCommand.S2C_PARTY_CHARACTER_SKIN_LIST_NOT;
    case 1016:
    case "S2C_PARTY_CHARACTER_SKIN_CHANGE_NOT":
      return PacketCommand.S2C_PARTY_CHARACTER_SKIN_CHANGE_NOT;
    case 1017:
    case "S2C_PARTY_ITEM_SKIN_LIST_NOT":
      return PacketCommand.S2C_PARTY_ITEM_SKIN_LIST_NOT;
    case 1018:
    case "S2C_PARTY_ITEM_SKIN_CHANGE_NOT":
      return PacketCommand.S2C_PARTY_ITEM_SKIN_CHANGE_NOT;
    case 1019:
    case "S2C_PARTY_GAME_DIFFICULTY_CHANGE_NOT":
      return PacketCommand.S2C_PARTY_GAME_DIFFICULTY_CHANGE_NOT;
    case 1020:
    case "C2S_PARTY_MEMBER_KICK_REQ":
      return PacketCommand.C2S_PARTY_MEMBER_KICK_REQ;
    case 1021:
    case "S2C_PARTY_MEMBER_KICK_RES":
      return PacketCommand.S2C_PARTY_MEMBER_KICK_RES;
    case 1022:
    case "C2S_PARTY_CHAT_REQ":
      return PacketCommand.C2S_PARTY_CHAT_REQ;
    case 1023:
    case "S2C_PARTY_CHAT_RES":
      return PacketCommand.S2C_PARTY_CHAT_RES;
    case 1024:
    case "S2C_PARTY_CHAT_NOT":
      return PacketCommand.S2C_PARTY_CHAT_NOT;
    case 1025:
    case "S2C_PARTY_READY_CHANGE_NOT":
      return PacketCommand.S2C_PARTY_READY_CHANGE_NOT;
    case 1026:
    case "S2C_PARTY_KICKED_OUT_NOT":
      return PacketCommand.S2C_PARTY_KICKED_OUT_NOT;
    case 1027:
    case "S2C_PARTY_MEMBER_LOBBY_EMOTE_NOT":
      return PacketCommand.S2C_PARTY_MEMBER_LOBBY_EMOTE_NOT;
    case 1028:
    case "C2S_PARTY_START_LOBBY_EMOTE_REQ":
      return PacketCommand.C2S_PARTY_START_LOBBY_EMOTE_REQ;
    case 1029:
    case "S2C_PARTY_START_LOBBY_EMOTE_RES":
      return PacketCommand.S2C_PARTY_START_LOBBY_EMOTE_RES;
    case 1030:
    case "S2C_PARTY_START_LOBBY_EMOTE_NOT":
      return PacketCommand.S2C_PARTY_START_LOBBY_EMOTE_NOT;
    case 1150:
    case "MAX_PARTY_PACKET":
      return PacketCommand.MAX_PARTY_PACKET;
    case 1200:
    case "MIN_GM_PACKET":
      return PacketCommand.MIN_GM_PACKET;
    case 1201:
    case "C2S_GM_PARTY_ALL_RANDOM_REQ":
      return PacketCommand.C2S_GM_PARTY_ALL_RANDOM_REQ;
    case 1202:
    case "S2C_GM_PARTY_ALL_RANDOM_RES":
      return PacketCommand.S2C_GM_PARTY_ALL_RANDOM_RES;
    case 1203:
    case "C2S_GM_ENTER_GAME_SPECTATOR_REQ":
      return PacketCommand.C2S_GM_ENTER_GAME_SPECTATOR_REQ;
    case 1204:
    case "S2C_GM_ENTER_GAME_SPECTATOR_RES":
      return PacketCommand.S2C_GM_ENTER_GAME_SPECTATOR_RES;
    case 1300:
    case "MAX_GM_PACKET":
      return PacketCommand.MAX_GM_PACKET;
    case 1350:
    case "MIN_MERCHANT_PACKET":
      return PacketCommand.MIN_MERCHANT_PACKET;
    case 1351:
    case "C2S_MERCHANT_LIST_REQ":
      return PacketCommand.C2S_MERCHANT_LIST_REQ;
    case 1352:
    case "S2C_MERCHANT_LIST_RES":
      return PacketCommand.S2C_MERCHANT_LIST_RES;
    case 1353:
    case "C2S_MERCHANT_STOCK_BUY_ITEM_LIST_REQ":
      return PacketCommand.C2S_MERCHANT_STOCK_BUY_ITEM_LIST_REQ;
    case 1354:
    case "S2C_MERCHANT_STOCK_BUY_ITEM_LIST_RES":
      return PacketCommand.S2C_MERCHANT_STOCK_BUY_ITEM_LIST_RES;
    case 1355:
    case "C2S_MERCHANT_STOCK_SELL_BACK_ITEM_LIST_REQ":
      return PacketCommand.C2S_MERCHANT_STOCK_SELL_BACK_ITEM_LIST_REQ;
    case 1356:
    case "S2C_MERCHANT_STOCK_SELL_BACK_ITEM_LIST_RES":
      return PacketCommand.S2C_MERCHANT_STOCK_SELL_BACK_ITEM_LIST_RES;
    case 1357:
    case "C2S_MERCHANT_STOCK_BUY_REQ":
      return PacketCommand.C2S_MERCHANT_STOCK_BUY_REQ;
    case 1358:
    case "S2C_MERCHANT_STOCK_BUY_RES":
      return PacketCommand.S2C_MERCHANT_STOCK_BUY_RES;
    case 1359:
    case "C2S_MERCHANT_STOCK_SELL_BACK_REQ":
      return PacketCommand.C2S_MERCHANT_STOCK_SELL_BACK_REQ;
    case 1360:
    case "S2C_MERCHANT_STOCK_SELL_BACK_RES":
      return PacketCommand.S2C_MERCHANT_STOCK_SELL_BACK_RES;
    case 1361:
    case "C2S_MERCHANT_SERVICE_CRAFT_LIST_REQ":
      return PacketCommand.C2S_MERCHANT_SERVICE_CRAFT_LIST_REQ;
    case 1362:
    case "S2C_MERCHANT_SERVICE_CRAFT_LIST_RES":
      return PacketCommand.S2C_MERCHANT_SERVICE_CRAFT_LIST_RES;
    case 1363:
    case "C2S_MERCHANT_SERVICE_CRAFT_REQ":
      return PacketCommand.C2S_MERCHANT_SERVICE_CRAFT_REQ;
    case 1364:
    case "S2C_MERCHANT_SERVICE_CRAFT_RES":
      return PacketCommand.S2C_MERCHANT_SERVICE_CRAFT_RES;
    case 1365:
    case "C2S_MERCHANT_SERVICE_REPAIR_REQ":
      return PacketCommand.C2S_MERCHANT_SERVICE_REPAIR_REQ;
    case 1366:
    case "S2C_MERCHANT_SERVICE_REPAIR_RES":
      return PacketCommand.S2C_MERCHANT_SERVICE_REPAIR_RES;
    case 1367:
    case "C2S_MERCHANT_QUEST_LIST_REQ":
      return PacketCommand.C2S_MERCHANT_QUEST_LIST_REQ;
    case 1368:
    case "S2C_MERCHANT_QUEST_LIST_RES":
      return PacketCommand.S2C_MERCHANT_QUEST_LIST_RES;
    case 1369:
    case "C2S_MERCHANT_QUEST_REQ":
      return PacketCommand.C2S_MERCHANT_QUEST_REQ;
    case 1370:
    case "S2C_MERCHANT_QUEST_RES":
      return PacketCommand.S2C_MERCHANT_QUEST_RES;
    case 1600:
    case "MAX_MERCHANT_PACKET":
      return PacketCommand.MAX_MERCHANT_PACKET;
    case 1650:
    case "MIN_KARMA_PACKET":
      return PacketCommand.MIN_KARMA_PACKET;
    case 1651:
    case "C2S_KARMA_REPORT_LIST_REQ":
      return PacketCommand.C2S_KARMA_REPORT_LIST_REQ;
    case 1652:
    case "S2C_KARMA_REPORT_LIST_RES":
      return PacketCommand.S2C_KARMA_REPORT_LIST_RES;
    case 1653:
    case "C2S_KARMA_REPORT_ACTION_REQ":
      return PacketCommand.C2S_KARMA_REPORT_ACTION_REQ;
    case 1654:
    case "S2C_KARMA_REPORT_ACTION_RES":
      return PacketCommand.S2C_KARMA_REPORT_ACTION_RES;
    case 1655:
    case "S2C_KARMA_RATING_UPDATE_NOT":
      return PacketCommand.S2C_KARMA_RATING_UPDATE_NOT;
    case 1700:
    case "MAX_KARMA_PACKET":
      return PacketCommand.MAX_KARMA_PACKET;
    case 2000:
    case "MIN_TRADE_PACKET":
      return PacketCommand.MIN_TRADE_PACKET;
    case 2001:
    case "C2S_TRADE_CHANNEL_LIST_REQ":
      return PacketCommand.C2S_TRADE_CHANNEL_LIST_REQ;
    case 2002:
    case "S2C_TRADE_CHANNEL_LIST_RES":
      return PacketCommand.S2C_TRADE_CHANNEL_LIST_RES;
    case 2003:
    case "C2S_TRADE_CHANNEL_SELECT_REQ":
      return PacketCommand.C2S_TRADE_CHANNEL_SELECT_REQ;
    case 2004:
    case "S2C_TRADE_CHANNEL_SELECT_RES":
      return PacketCommand.S2C_TRADE_CHANNEL_SELECT_RES;
    case 2005:
    case "C2S_TRADE_CHANNEL_EXIT_REQ":
      return PacketCommand.C2S_TRADE_CHANNEL_EXIT_REQ;
    case 2006:
    case "S2C_TRADE_CHANNEL_EXIT_RES":
      return PacketCommand.S2C_TRADE_CHANNEL_EXIT_RES;
    case 2007:
    case "C2S_TRADE_CHANNEL_USER_LIST_REQ":
      return PacketCommand.C2S_TRADE_CHANNEL_USER_LIST_REQ;
    case 2008:
    case "S2C_TRADE_CHANNEL_USER_LIST_RES":
      return PacketCommand.S2C_TRADE_CHANNEL_USER_LIST_RES;
    case 2009:
    case "S2C_TRADE_CHANNEL_USER_UPDATE_NOT":
      return PacketCommand.S2C_TRADE_CHANNEL_USER_UPDATE_NOT;
    case 2011:
    case "C2S_TRADE_CHANNEL_CHAT_REQ":
      return PacketCommand.C2S_TRADE_CHANNEL_CHAT_REQ;
    case 2012:
    case "S2C_TRADE_CHANNEL_CHAT_RES":
      return PacketCommand.S2C_TRADE_CHANNEL_CHAT_RES;
    case 2013:
    case "C2S_TRADE_CHANNEL_CHAT_TEXT_RANGE_REQ":
      return PacketCommand.C2S_TRADE_CHANNEL_CHAT_TEXT_RANGE_REQ;
    case 2014:
    case "S2C_TRADE_CHANNEL_CHAT_TEXT_RANGE_RES":
      return PacketCommand.S2C_TRADE_CHANNEL_CHAT_TEXT_RANGE_RES;
    case 2030:
    case "C2S_TRADE_MEMBERSHIP_REQUIREMENT_REQ":
      return PacketCommand.C2S_TRADE_MEMBERSHIP_REQUIREMENT_REQ;
    case 2031:
    case "S2C_TRADE_MEMBERSHIP_REQUIREMENT_RES":
      return PacketCommand.S2C_TRADE_MEMBERSHIP_REQUIREMENT_RES;
    case 2032:
    case "C2S_TRADE_MEMBERSHIP_REQ":
      return PacketCommand.C2S_TRADE_MEMBERSHIP_REQ;
    case 2033:
    case "S2C_TRADE_MEMBERSHIP_RES":
      return PacketCommand.S2C_TRADE_MEMBERSHIP_RES;
    case 2034:
    case "C2S_TRADE_REQUEST_REQ":
      return PacketCommand.C2S_TRADE_REQUEST_REQ;
    case 2035:
    case "S2C_TRADE_REQUEST_RES":
      return PacketCommand.S2C_TRADE_REQUEST_RES;
    case 2036:
    case "S2C_TRADE_REQUEST_NOT":
      return PacketCommand.S2C_TRADE_REQUEST_NOT;
    case 2037:
    case "C2S_TRADE_ANSWER_REQ":
      return PacketCommand.C2S_TRADE_ANSWER_REQ;
    case 2038:
    case "S2C_TRADE_ANSWER_RES":
      return PacketCommand.S2C_TRADE_ANSWER_RES;
    case 2039:
    case "S2C_TRADE_ANSWER_REFUSAL_NOT":
      return PacketCommand.S2C_TRADE_ANSWER_REFUSAL_NOT;
    case 2050:
    case "S2C_TRADING_BEGIN_NOT":
      return PacketCommand.S2C_TRADING_BEGIN_NOT;
    case 2051:
    case "C2S_TRADING_CLOSE_REQ":
      return PacketCommand.C2S_TRADING_CLOSE_REQ;
    case 2052:
    case "S2C_TRADING_CLOSE_RES":
      return PacketCommand.S2C_TRADING_CLOSE_RES;
    case 2053:
    case "C2S_TRADING_CHAT_REQ":
      return PacketCommand.C2S_TRADING_CHAT_REQ;
    case 2054:
    case "S2C_TRADING_CHAT_RES":
      return PacketCommand.S2C_TRADING_CHAT_RES;
    case 2055:
    case "C2S_TRADING_ITEM_UPDATE_REQ":
      return PacketCommand.C2S_TRADING_ITEM_UPDATE_REQ;
    case 2056:
    case "S2C_TRADING_ITEM_UPDATE_RES":
      return PacketCommand.S2C_TRADING_ITEM_UPDATE_RES;
    case 2057:
    case "C2S_TRADING_READY_REQ":
      return PacketCommand.C2S_TRADING_READY_REQ;
    case 2058:
    case "S2C_TRADING_READY_RES":
      return PacketCommand.S2C_TRADING_READY_RES;
    case 2059:
    case "S2C_TRADING_READY_NOT":
      return PacketCommand.S2C_TRADING_READY_NOT;
    case 2060:
    case "S2C_TRADING_CONFIRM_NOT":
      return PacketCommand.S2C_TRADING_CONFIRM_NOT;
    case 2061:
    case "C2S_TRADING_CONFIRM_READY_REQ":
      return PacketCommand.C2S_TRADING_CONFIRM_READY_REQ;
    case 2062:
    case "S2C_TRADING_CONFIRM_READY_RES":
      return PacketCommand.S2C_TRADING_CONFIRM_READY_RES;
    case 2063:
    case "S2C_TRADING_CONFIRM_READY_NOT":
      return PacketCommand.S2C_TRADING_CONFIRM_READY_NOT;
    case 2064:
    case "C2S_TRADING_CONFIRM_CANCEL_REQ":
      return PacketCommand.C2S_TRADING_CONFIRM_CANCEL_REQ;
    case 2065:
    case "S2C_TRADING_CONFIRM_CANCEL_RES":
      return PacketCommand.S2C_TRADING_CONFIRM_CANCEL_RES;
    case 2066:
    case "S2C_TRADING_RESULT_NOT":
      return PacketCommand.S2C_TRADING_RESULT_NOT;
    case 2300:
    case "MAX_TRADE_PACKET":
      return PacketCommand.MAX_TRADE_PACKET;
    case 2330:
    case "MIN_CUSTOMIZE_PACKET":
      return PacketCommand.MIN_CUSTOMIZE_PACKET;
    case 2331:
    case "C2S_CUSTOMIZE_NEW_ITEM_CHECK_REQ":
      return PacketCommand.C2S_CUSTOMIZE_NEW_ITEM_CHECK_REQ;
    case 2332:
    case "S2C_CUSTOMIZE_NEW_ITEM_CHECK_RES":
      return PacketCommand.S2C_CUSTOMIZE_NEW_ITEM_CHECK_RES;
    case 2333:
    case "S2C_CUSTOMIZE_NEW_ITEM_ALERT_NOT":
      return PacketCommand.S2C_CUSTOMIZE_NEW_ITEM_ALERT_NOT;
    case 2351:
    case "C2S_CUSTOMIZE_CHARACTER_INFO_REQ":
      return PacketCommand.C2S_CUSTOMIZE_CHARACTER_INFO_REQ;
    case 2352:
    case "S2C_CUSTOMIZE_CHARACTER_INFO_RES":
      return PacketCommand.S2C_CUSTOMIZE_CHARACTER_INFO_RES;
    case 2353:
    case "C2S_CUSTOMIZE_ITEM_INFO_REQ":
      return PacketCommand.C2S_CUSTOMIZE_ITEM_INFO_REQ;
    case 2354:
    case "S2C_CUSTOMIZE_ITEM_INFO_RES":
      return PacketCommand.S2C_CUSTOMIZE_ITEM_INFO_RES;
    case 2355:
    case "C2S_CUSTOMIZE_EMOTE_INFO_REQ":
      return PacketCommand.C2S_CUSTOMIZE_EMOTE_INFO_REQ;
    case 2356:
    case "S2C_CUSTOMIZE_EMOTE_INFO_RES":
      return PacketCommand.S2C_CUSTOMIZE_EMOTE_INFO_RES;
    case 2357:
    case "C2S_CUSTOMIZE_ACTION_INFO_REQ":
      return PacketCommand.C2S_CUSTOMIZE_ACTION_INFO_REQ;
    case 2358:
    case "S2C_CUSTOMIZE_ACTION_INFO_RES":
      return PacketCommand.S2C_CUSTOMIZE_ACTION_INFO_RES;
    case 2359:
    case "C2S_CUSTOMIZE_LOBBY_EMOTE_INFO_REQ":
      return PacketCommand.C2S_CUSTOMIZE_LOBBY_EMOTE_INFO_REQ;
    case 2360:
    case "S2C_CUSTOMIZE_LOBBY_EMOTE_INFO_RES":
      return PacketCommand.S2C_CUSTOMIZE_LOBBY_EMOTE_INFO_RES;
    case 2370:
    case "C2S_CUSTOMIZE_CHARACTER_MOUNT_REQ":
      return PacketCommand.C2S_CUSTOMIZE_CHARACTER_MOUNT_REQ;
    case 2371:
    case "S2C_CUSTOMIZE_CHARACTER_MOUNT_RES":
      return PacketCommand.S2C_CUSTOMIZE_CHARACTER_MOUNT_RES;
    case 2372:
    case "C2S_CUSTOMIZE_CHARACTER_UNMOUNT_REQ":
      return PacketCommand.C2S_CUSTOMIZE_CHARACTER_UNMOUNT_REQ;
    case 2373:
    case "S2C_CUSTOMIZE_CHARACTER_UNMOUNT_RES":
      return PacketCommand.S2C_CUSTOMIZE_CHARACTER_UNMOUNT_RES;
    case 2380:
    case "C2S_CUSTOMIZE_ITEM_MOUNT_REQ":
      return PacketCommand.C2S_CUSTOMIZE_ITEM_MOUNT_REQ;
    case 2381:
    case "S2C_CUSTOMIZE_ITEM_MOUNT_RES":
      return PacketCommand.S2C_CUSTOMIZE_ITEM_MOUNT_RES;
    case 2382:
    case "C2S_CUSTOMIZE_ITEM_UNMOUNT_REQ":
      return PacketCommand.C2S_CUSTOMIZE_ITEM_UNMOUNT_REQ;
    case 2383:
    case "S2C_CUSTOMIZE_ITEM_UNMOUNT_RES":
      return PacketCommand.S2C_CUSTOMIZE_ITEM_UNMOUNT_RES;
    case 2390:
    case "C2S_CUSTOMIZE_EMOTE_MOUNT_REQ":
      return PacketCommand.C2S_CUSTOMIZE_EMOTE_MOUNT_REQ;
    case 2391:
    case "S2C_CUSTOMIZE_EMOTE_MOUNT_RES":
      return PacketCommand.S2C_CUSTOMIZE_EMOTE_MOUNT_RES;
    case 2392:
    case "C2S_CUSTOMIZE_EMOTE_UNMOUNT_REQ":
      return PacketCommand.C2S_CUSTOMIZE_EMOTE_UNMOUNT_REQ;
    case 2393:
    case "S2C_CUSTOMIZE_EMOTE_UNMOUNT_RES":
      return PacketCommand.S2C_CUSTOMIZE_EMOTE_UNMOUNT_RES;
    case 2400:
    case "C2S_CUSTOMIZE_ACTION_MOUNT_REQ":
      return PacketCommand.C2S_CUSTOMIZE_ACTION_MOUNT_REQ;
    case 2401:
    case "S2C_CUSTOMIZE_ACTION_MOUNT_RES":
      return PacketCommand.S2C_CUSTOMIZE_ACTION_MOUNT_RES;
    case 2402:
    case "C2S_CUSTOMIZE_ACTION_UNMOUNT_REQ":
      return PacketCommand.C2S_CUSTOMIZE_ACTION_UNMOUNT_REQ;
    case 2403:
    case "S2C_CUSTOMIZE_ACTION_UNMOUNT_RES":
      return PacketCommand.S2C_CUSTOMIZE_ACTION_UNMOUNT_RES;
    case 2410:
    case "C2S_CUSTOMIZE_LOBBY_EMOTE_MOUNT_REQ":
      return PacketCommand.C2S_CUSTOMIZE_LOBBY_EMOTE_MOUNT_REQ;
    case 2411:
    case "S2C_CUSTOMIZE_LOBBY_EMOTE_MOUNT_RES":
      return PacketCommand.S2C_CUSTOMIZE_LOBBY_EMOTE_MOUNT_RES;
    case 2412:
    case "C2S_CUSTOMIZE_LOBBY_EMOTE_UNMOUNT_REQ":
      return PacketCommand.C2S_CUSTOMIZE_LOBBY_EMOTE_UNMOUNT_REQ;
    case 2413:
    case "S2C_CUSTOMIZE_LOBBY_EMOTE_UNMOUNT_RES":
      return PacketCommand.S2C_CUSTOMIZE_LOBBY_EMOTE_UNMOUNT_RES;
    case 2450:
    case "MAX_CUSTOMIZE_PACKET":
      return PacketCommand.MAX_CUSTOMIZE_PACKET;
    case 2501:
    case "MIN_SHOP_PACKET":
      return PacketCommand.MIN_SHOP_PACKET;
    case 2502:
    case "C2S_SHOP_CHARACTER_SKIN_LIST_REQ":
      return PacketCommand.C2S_SHOP_CHARACTER_SKIN_LIST_REQ;
    case 2503:
    case "S2C_SHOP_CHARACTER_SKIN_LIST_RES":
      return PacketCommand.S2C_SHOP_CHARACTER_SKIN_LIST_RES;
    case 2504:
    case "C2S_SHOP_ITEM_SKIN_LIST_REQ":
      return PacketCommand.C2S_SHOP_ITEM_SKIN_LIST_REQ;
    case 2505:
    case "S2C_SHOP_ITEM_SKIN_LIST_RES":
      return PacketCommand.S2C_SHOP_ITEM_SKIN_LIST_RES;
    case 2506:
    case "C2S_SHOP_EMOTE_LIST_REQ":
      return PacketCommand.C2S_SHOP_EMOTE_LIST_REQ;
    case 2507:
    case "S2C_SHOP_EMOTE_LIST_RES":
      return PacketCommand.S2C_SHOP_EMOTE_LIST_RES;
    case 2508:
    case "C2S_SHOP_ACTION_LIST_REQ":
      return PacketCommand.C2S_SHOP_ACTION_LIST_REQ;
    case 2509:
    case "S2C_SHOP_ACTION_LIST_RES":
      return PacketCommand.S2C_SHOP_ACTION_LIST_RES;
    case 2510:
    case "C2S_SHOP_LOBBY_EMOTE_LIST_REQ":
      return PacketCommand.C2S_SHOP_LOBBY_EMOTE_LIST_REQ;
    case 2511:
    case "S2C_SHOP_LOBBY_EMOTE_LIST_RES":
      return PacketCommand.S2C_SHOP_LOBBY_EMOTE_LIST_RES;
    case 2520:
    case "C2S_SHOP_CHARACTER_SKIN_BUY_REQ":
      return PacketCommand.C2S_SHOP_CHARACTER_SKIN_BUY_REQ;
    case 2521:
    case "S2C_SHOP_CHARACTER_SKIN_BUY_RES":
      return PacketCommand.S2C_SHOP_CHARACTER_SKIN_BUY_RES;
    case 2522:
    case "C2S_SHOP_ITEM_SKIN_BUY_REQ":
      return PacketCommand.C2S_SHOP_ITEM_SKIN_BUY_REQ;
    case 2523:
    case "S2C_SHOP_ITEM_SKIN_BUY_RES":
      return PacketCommand.S2C_SHOP_ITEM_SKIN_BUY_RES;
    case 2524:
    case "C2S_SHOP_EMOTE_BUY_REQ":
      return PacketCommand.C2S_SHOP_EMOTE_BUY_REQ;
    case 2525:
    case "S2C_SHOP_EMOTE_BUY_RES":
      return PacketCommand.S2C_SHOP_EMOTE_BUY_RES;
    case 2526:
    case "C2S_SHOP_ACTION_BUY_REQ":
      return PacketCommand.C2S_SHOP_ACTION_BUY_REQ;
    case 2527:
    case "S2C_SHOP_ACTION_BUY_RES":
      return PacketCommand.S2C_SHOP_ACTION_BUY_RES;
    case 2528:
    case "C2S_SHOP_LOBBY_EMOTE_BUY_REQ":
      return PacketCommand.C2S_SHOP_LOBBY_EMOTE_BUY_REQ;
    case 2529:
    case "S2C_SHOP_LOBBY_EMOTE_BUY_RES":
      return PacketCommand.S2C_SHOP_LOBBY_EMOTE_BUY_RES;
    case 2600:
    case "MAX_SHOP_PACKET":
      return PacketCommand.MAX_SHOP_PACKET;
    case 3000:
    case "MIN_CLASS_PACKET":
      return PacketCommand.MIN_CLASS_PACKET;
    case 3001:
    case "C2S_CLASS_LEVEL_INFO_REQ":
      return PacketCommand.C2S_CLASS_LEVEL_INFO_REQ;
    case 3002:
    case "S2C_CLASS_LEVEL_INFO_RES":
      return PacketCommand.S2C_CLASS_LEVEL_INFO_RES;
    case 3031:
    case "C2S_CLASS_EQUIP_INFO_REQ":
      return PacketCommand.C2S_CLASS_EQUIP_INFO_REQ;
    case 3032:
    case "S2C_CLASS_EQUIP_INFO_RES":
      return PacketCommand.S2C_CLASS_EQUIP_INFO_RES;
    case 3041:
    case "C2S_CLASS_PERK_LIST_REQ":
      return PacketCommand.C2S_CLASS_PERK_LIST_REQ;
    case 3042:
    case "S2C_CLASS_PERK_LIST_RES":
      return PacketCommand.S2C_CLASS_PERK_LIST_RES;
    case 3043:
    case "C2S_CLASS_SKILL_LIST_REQ":
      return PacketCommand.C2S_CLASS_SKILL_LIST_REQ;
    case 3044:
    case "S2C_CLASS_SKILL_LIST_RES":
      return PacketCommand.S2C_CLASS_SKILL_LIST_RES;
    case 3045:
    case "C2S_CLASS_SPELL_LIST_REQ":
      return PacketCommand.C2S_CLASS_SPELL_LIST_REQ;
    case 3046:
    case "S2C_CLASS_SPELL_LIST_RES":
      return PacketCommand.S2C_CLASS_SPELL_LIST_RES;
    case 3051:
    case "C2S_CLASS_ITEM_MOVE_REQ":
      return PacketCommand.C2S_CLASS_ITEM_MOVE_REQ;
    case 3052:
    case "S2C_CLASS_ITEM_MOVE_RES":
      return PacketCommand.S2C_CLASS_ITEM_MOVE_RES;
    case 3053:
    case "C2S_CLASS_SPELL_SLOT_MOVE_REQ":
      return PacketCommand.C2S_CLASS_SPELL_SLOT_MOVE_REQ;
    case 3054:
    case "S2C_CLASS_SPELL_SLOT_MOVE_RES":
      return PacketCommand.S2C_CLASS_SPELL_SLOT_MOVE_RES;
    case 3055:
    case "C2S_CLASS_SPELL_SEQUENCE_CHANGE_REQ":
      return PacketCommand.C2S_CLASS_SPELL_SEQUENCE_CHANGE_REQ;
    case 3056:
    case "S2C_CLASS_SPELL_SEQUENCE_CHANGE_RES":
      return PacketCommand.S2C_CLASS_SPELL_SEQUENCE_CHANGE_RES;
    case 3100:
    case "MAX_CLASS_PACKET":
      return PacketCommand.MAX_CLASS_PACKET;
    case 3200:
    case "MIN_GATHERING_HALL_PACKET":
      return PacketCommand.MIN_GATHERING_HALL_PACKET;
    case 3201:
    case "C2S_GATHERING_HALL_CHANNEL_LIST_REQ":
      return PacketCommand.C2S_GATHERING_HALL_CHANNEL_LIST_REQ;
    case 3202:
    case "S2C_GATHERING_HALL_CHANNEL_LIST_RES":
      return PacketCommand.S2C_GATHERING_HALL_CHANNEL_LIST_RES;
    case 3203:
    case "C2S_GATHERING_HALL_CHANNEL_SELECT_REQ":
      return PacketCommand.C2S_GATHERING_HALL_CHANNEL_SELECT_REQ;
    case 3204:
    case "S2C_GATHERING_HALL_CHANNEL_SELECT_RES":
      return PacketCommand.S2C_GATHERING_HALL_CHANNEL_SELECT_RES;
    case 3205:
    case "C2S_GATHERING_HALL_CHANNEL_EXIT_REQ":
      return PacketCommand.C2S_GATHERING_HALL_CHANNEL_EXIT_REQ;
    case 3206:
    case "S2C_GATHERING_HALL_CHANNEL_EXIT_RES":
      return PacketCommand.S2C_GATHERING_HALL_CHANNEL_EXIT_RES;
    case 3207:
    case "C2S_GATHERING_HALL_CHANNEL_USER_LIST_REQ":
      return PacketCommand.C2S_GATHERING_HALL_CHANNEL_USER_LIST_REQ;
    case 3208:
    case "S2C_GATHERING_HALL_CHANNEL_USER_LIST_RES":
      return PacketCommand.S2C_GATHERING_HALL_CHANNEL_USER_LIST_RES;
    case 3209:
    case "S2C_GATHERING_HALL_CHANNEL_USER_UPDATE_NOT":
      return PacketCommand.S2C_GATHERING_HALL_CHANNEL_USER_UPDATE_NOT;
    case 3220:
    case "C2S_GATHERING_HALL_CHANNEL_CHAT_REQ":
      return PacketCommand.C2S_GATHERING_HALL_CHANNEL_CHAT_REQ;
    case 3221:
    case "S2C_GATHERING_HALL_CHANNEL_CHAT_RES":
      return PacketCommand.S2C_GATHERING_HALL_CHANNEL_CHAT_RES;
    case 3222:
    case "S2C_GATHERING_HALL_CHANNEL_CHAT_NOT":
      return PacketCommand.S2C_GATHERING_HALL_CHANNEL_CHAT_NOT;
    case 3230:
    case "C2S_GATHERING_HALL_TARGET_EQUIPPED_ITEM_REQ":
      return PacketCommand.C2S_GATHERING_HALL_TARGET_EQUIPPED_ITEM_REQ;
    case 3231:
    case "S2C_GATHERING_HALL_TARGET_EQUIPPED_ITEM_RES":
      return PacketCommand.S2C_GATHERING_HALL_TARGET_EQUIPPED_ITEM_RES;
    case 3300:
    case "MAX_GATHERING_HALL_PACKET":
      return PacketCommand.MAX_GATHERING_HALL_PACKET;
    case 10000:
    case "MIN_META_PACKET":
      return PacketCommand.MIN_META_PACKET;
    case 10001:
    case "C2S_META_LOCATION_REQ":
      return PacketCommand.C2S_META_LOCATION_REQ;
    case 10002:
    case "S2C_META_LOCATION_RES":
      return PacketCommand.S2C_META_LOCATION_RES;
    case 10010:
    case "C2S_BLOCK_CHARACTER_REQ":
      return PacketCommand.C2S_BLOCK_CHARACTER_REQ;
    case 10011:
    case "S2C_BLOCK_CHARACTER_RES":
      return PacketCommand.S2C_BLOCK_CHARACTER_RES;
    case 10012:
    case "C2S_UNBLOCK_CHARACTER_REQ":
      return PacketCommand.C2S_UNBLOCK_CHARACTER_REQ;
    case 10013:
    case "S2C_UNBLOCK_CHARACTER_RES":
      return PacketCommand.S2C_UNBLOCK_CHARACTER_RES;
    case 10014:
    case "C2S_BLOCK_CHARACTER_LIST_REQ":
      return PacketCommand.C2S_BLOCK_CHARACTER_LIST_REQ;
    case 10015:
    case "S2C_BLOCK_CHARACTER_LIST_RES":
      return PacketCommand.S2C_BLOCK_CHARACTER_LIST_RES;
    case 10030:
    case "C2S_HACK_LOG_REQ":
      return PacketCommand.C2S_HACK_LOG_REQ;
    case 10031:
    case "S2C_HACK_LOG_RES":
      return PacketCommand.S2C_HACK_LOG_RES;
    case 10050:
    case "S2C_SERVICE_POLICY_NOT":
      return PacketCommand.S2C_SERVICE_POLICY_NOT;
    case 10051:
    case "S2C_HACK_CHECK_DLL_LIST_NOT":
      return PacketCommand.S2C_HACK_CHECK_DLL_LIST_NOT;
    case 10060:
    case "C2S_RE_LOGIN_REQ":
      return PacketCommand.C2S_RE_LOGIN_REQ;
    case 10061:
    case "S2C_RE_LOGIN_RES":
      return PacketCommand.S2C_RE_LOGIN_RES;
    case 10062:
    case "S2C_CLOSED_GAME_NOT":
      return PacketCommand.S2C_CLOSED_GAME_NOT;
    case 10080:
    case "C2S_USER_CHARACTER_INFO_REQ":
      return PacketCommand.C2S_USER_CHARACTER_INFO_REQ;
    case 10081:
    case "S2C_USER_CHARACTER_INFO_RES":
      return PacketCommand.S2C_USER_CHARACTER_INFO_RES;
    case 10500:
    case "S2C_OPERATE_ANNOUNCE_NOT":
      return PacketCommand.S2C_OPERATE_ANNOUNCE_NOT;
    case 11000:
    case "MAX_META_PACKET":
      return PacketCommand.MAX_META_PACKET;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PacketCommand.UNRECOGNIZED;
  }
}

export function packetCommandToJSON(object: PacketCommand): string {
  switch (object) {
    case PacketCommand.PACKET_NONE:
      return "PACKET_NONE";
    case PacketCommand.C2S_ALIVE_REQ:
      return "C2S_ALIVE_REQ";
    case PacketCommand.S2C_ALIVE_RES:
      return "S2C_ALIVE_RES";
    case PacketCommand.C2S_RECONNECT_REQ:
      return "C2S_RECONNECT_REQ";
    case PacketCommand.S2C_RECONNECT_RES:
      return "S2C_RECONNECT_RES";
    case PacketCommand.C2S_ACCOUNT_LOGIN_REQ:
      return "C2S_ACCOUNT_LOGIN_REQ";
    case PacketCommand.S2C_ACCOUNT_LOGIN_RES:
      return "S2C_ACCOUNT_LOGIN_RES";
    case PacketCommand.C2S_ACCOUNT_CHARACTER_CREATE_REQ:
      return "C2S_ACCOUNT_CHARACTER_CREATE_REQ";
    case PacketCommand.S2C_ACCOUNT_CHARACTER_CREATE_RES:
      return "S2C_ACCOUNT_CHARACTER_CREATE_RES";
    case PacketCommand.C2S_ACCOUNT_CHARACTER_LIST_REQ:
      return "C2S_ACCOUNT_CHARACTER_LIST_REQ";
    case PacketCommand.S2C_ACCOUNT_CHARACTER_LIST_RES:
      return "S2C_ACCOUNT_CHARACTER_LIST_RES";
    case PacketCommand.C2S_ACCOUNT_CHARACTER_DELETE_REQ:
      return "C2S_ACCOUNT_CHARACTER_DELETE_REQ";
    case PacketCommand.S2C_ACCOUNT_CHARACTER_DELETE_RES:
      return "S2C_ACCOUNT_CHARACTER_DELETE_RES";
    case PacketCommand.C2S_LOBBY_ENTER_REQ:
      return "C2S_LOBBY_ENTER_REQ";
    case PacketCommand.S2C_LOBBY_ENTER_RES:
      return "S2C_LOBBY_ENTER_RES";
    case PacketCommand.C2S_ACCOUNT_AGREE_ANSWER_REQ:
      return "C2S_ACCOUNT_AGREE_ANSWER_REQ";
    case PacketCommand.S2C_ACCOUNT_AGREE_ANSWER_RES:
      return "S2C_ACCOUNT_AGREE_ANSWER_RES";
    case PacketCommand.C2S_CHARACTER_SELECT_ENTER_REQ:
      return "C2S_CHARACTER_SELECT_ENTER_REQ";
    case PacketCommand.S2C_CHARACTER_SELECT_ENTER_RES:
      return "S2C_CHARACTER_SELECT_ENTER_RES";
    case PacketCommand.C2S_LOBBY_CHARACTER_INFO_REQ:
      return "C2S_LOBBY_CHARACTER_INFO_REQ";
    case PacketCommand.S2C_LOBBY_CHARACTER_INFO_RES:
      return "S2C_LOBBY_CHARACTER_INFO_RES";
    case PacketCommand.C2S_OPEN_LOBBY_MAP_REQ:
      return "C2S_OPEN_LOBBY_MAP_REQ";
    case PacketCommand.S2C_OPEN_LOBBY_MAP_RES:
      return "S2C_OPEN_LOBBY_MAP_RES";
    case PacketCommand.C2S_LOBBY_REGION_SELECT_REQ:
      return "C2S_LOBBY_REGION_SELECT_REQ";
    case PacketCommand.S2C_LOBBY_REGION_SELECT_RES:
      return "S2C_LOBBY_REGION_SELECT_RES";
    case PacketCommand.C2S_LOBBY_ENTER_FROM_GAME_REQ:
      return "C2S_LOBBY_ENTER_FROM_GAME_REQ";
    case PacketCommand.S2C_LOBBY_ENTER_FROM_GAME_RES:
      return "S2C_LOBBY_ENTER_FROM_GAME_RES";
    case PacketCommand.C2S_LOBBY_GAME_DIFFICULTY_SELECT_REQ:
      return "C2S_LOBBY_GAME_DIFFICULTY_SELECT_REQ";
    case PacketCommand.S2C_LOBBY_GAME_DIFFICULTY_SELECT_RES:
      return "S2C_LOBBY_GAME_DIFFICULTY_SELECT_RES";
    case PacketCommand.S2C_LOBBY_ACCOUNT_CURRENCY_LIST_NOT:
      return "S2C_LOBBY_ACCOUNT_CURRENCY_LIST_NOT";
    case PacketCommand.S2C_LOBBY_CHARACTER_LOBBY_EMOTE_NOT:
      return "S2C_LOBBY_CHARACTER_LOBBY_EMOTE_NOT";
    case PacketCommand.S2C_LOBBY_REPORT_PUNISH_LIST_NOT:
      return "S2C_LOBBY_REPORT_PUNISH_LIST_NOT";
    case PacketCommand.C2S_LOBBY_ENTER_COUPON_CODE_REQ:
      return "C2S_LOBBY_ENTER_COUPON_CODE_REQ";
    case PacketCommand.S2C_LOBBY_ENTER_COUPON_CODE_RES:
      return "S2C_LOBBY_ENTER_COUPON_CODE_RES";
    case PacketCommand.MIN_INVENTORY_PACKET:
      return "MIN_INVENTORY_PACKET";
    case PacketCommand.C2S_INVENTORY_INFO_REQ:
      return "C2S_INVENTORY_INFO_REQ";
    case PacketCommand.S2C_INVENTORY_INFO_RES:
      return "S2C_INVENTORY_INFO_RES";
    case PacketCommand.C2S_INVENTORY_ALL_UPDATE_REQ:
      return "C2S_INVENTORY_ALL_UPDATE_REQ";
    case PacketCommand.S2C_INVENTORY_ALL_UPDATE_RES:
      return "S2C_INVENTORY_ALL_UPDATE_RES";
    case PacketCommand.C2S_INVENTORY_SINGLE_UPDATE_REQ:
      return "C2S_INVENTORY_SINGLE_UPDATE_REQ";
    case PacketCommand.S2C_INVENTORY_SINGLE_UPDATE_RES:
      return "S2C_INVENTORY_SINGLE_UPDATE_RES";
    case PacketCommand.C2S_INVENTORY_MOVE_REQ:
      return "C2S_INVENTORY_MOVE_REQ";
    case PacketCommand.S2C_INVENTORY_MOVE_RES:
      return "S2C_INVENTORY_MOVE_RES";
    case PacketCommand.C2S_INVENTORY_MERGE_REQ:
      return "C2S_INVENTORY_MERGE_REQ";
    case PacketCommand.S2C_INVENTORY_MERGE_RES:
      return "S2C_INVENTORY_MERGE_RES";
    case PacketCommand.C2S_INVENTORY_SWAP_REQ:
      return "C2S_INVENTORY_SWAP_REQ";
    case PacketCommand.S2C_INVENTORY_SWAP_RES:
      return "S2C_INVENTORY_SWAP_RES";
    case PacketCommand.C2S_INVENTORY_SPLIT_MOVE_REQ:
      return "C2S_INVENTORY_SPLIT_MOVE_REQ";
    case PacketCommand.S2C_INVENTORY_SPLIT_MOVE_RES:
      return "S2C_INVENTORY_SPLIT_MOVE_RES";
    case PacketCommand.C2S_INVENTORY_SPLIT_MERGE_REQ:
      return "C2S_INVENTORY_SPLIT_MERGE_REQ";
    case PacketCommand.S2C_INVENTORY_SPLIT_MERGE_RES:
      return "S2C_INVENTORY_SPLIT_MERGE_RES";
    case PacketCommand.C2S_INVENTORY_SPLIT_SWAP_REQ:
      return "C2S_INVENTORY_SPLIT_SWAP_REQ";
    case PacketCommand.S2C_INVENTORY_SPLIT_SWAP_RES:
      return "S2C_INVENTORY_SPLIT_SWAP_RES";
    case PacketCommand.C2S_INVENTORY_TWO_HANDED_WEAPON_SWAP_REQ:
      return "C2S_INVENTORY_TWO_HANDED_WEAPON_SWAP_REQ";
    case PacketCommand.S2C_INVENTORY_TWO_HANDED_WEAPON_SWAP_RES:
      return "S2C_INVENTORY_TWO_HANDED_WEAPON_SWAP_RES";
    case PacketCommand.C2S_STORAGE_INFO_REQ:
      return "C2S_STORAGE_INFO_REQ";
    case PacketCommand.S2C_STORAGE_INFO_RES:
      return "S2C_STORAGE_INFO_RES";
    case PacketCommand.MAX_INVENTORY_PACKET:
      return "MAX_INVENTORY_PACKET";
    case PacketCommand.C2S_AUTO_MATCH_REG_REQ:
      return "C2S_AUTO_MATCH_REG_REQ";
    case PacketCommand.S2C_AUTO_MATCH_REG_RES:
      return "S2C_AUTO_MATCH_REG_RES";
    case PacketCommand.S2C_ENTER_GAME_SERVER_NOT:
      return "S2C_ENTER_GAME_SERVER_NOT";
    case PacketCommand.C2S_GAME_ENTER_COMPLETE_NOT:
      return "C2S_GAME_ENTER_COMPLETE_NOT";
    case PacketCommand.S2C_AUTO_MATCH_REG_TEAM_NOT:
      return "S2C_AUTO_MATCH_REG_TEAM_NOT";
    case PacketCommand.C2S_RECONNECT_INGAME_REQ:
      return "C2S_RECONNECT_INGAME_REQ";
    case PacketCommand.S2C_RECONNECT_INGAME_RES:
      return "S2C_RECONNECT_INGAME_RES";
    case PacketCommand.S2C_FLOOR_MATCHMAKED_NOT:
      return "S2C_FLOOR_MATCHMAKED_NOT";
    case PacketCommand.MIN_RANKING_PACKET:
      return "MIN_RANKING_PACKET";
    case PacketCommand.C2S_RANKING_RANGE_REQ:
      return "C2S_RANKING_RANGE_REQ";
    case PacketCommand.S2C_RANKING_RANGE_RES:
      return "S2C_RANKING_RANGE_RES";
    case PacketCommand.C2S_RANKING_NEARBY_REQ:
      return "C2S_RANKING_NEARBY_REQ";
    case PacketCommand.S2C_RANKING_NEARBY_RES:
      return "S2C_RANKING_NEARBY_RES";
    case PacketCommand.C2S_RANKING_CHARACTER_REQ:
      return "C2S_RANKING_CHARACTER_REQ";
    case PacketCommand.S2C_RANKING_CHARACTER_RES:
      return "S2C_RANKING_CHARACTER_RES";
    case PacketCommand.MAX_RANKING_PACKET:
      return "MAX_RANKING_PACKET";
    case PacketCommand.MIN_FRIEND_PACKET:
      return "MIN_FRIEND_PACKET";
    case PacketCommand.C2S_FRIEND_LIST_REQ:
      return "C2S_FRIEND_LIST_REQ";
    case PacketCommand.S2C_FRIEND_LIST_RES:
      return "S2C_FRIEND_LIST_RES";
    case PacketCommand.C2S_FRIEND_LIST_ALL_REQ:
      return "C2S_FRIEND_LIST_ALL_REQ";
    case PacketCommand.S2C_FRIEND_LIST_ALL_RES:
      return "S2C_FRIEND_LIST_ALL_RES";
    case PacketCommand.C2S_FRIEND_FIND_REQ:
      return "C2S_FRIEND_FIND_REQ";
    case PacketCommand.S2C_FRIEND_FIND_RES:
      return "S2C_FRIEND_FIND_RES";
    case PacketCommand.MAX_FRIEND_PACKET:
      return "MAX_FRIEND_PACKET";
    case PacketCommand.MIN_PARTY_PACKET:
      return "MIN_PARTY_PACKET";
    case PacketCommand.C2S_PARTY_INVITE_REQ:
      return "C2S_PARTY_INVITE_REQ";
    case PacketCommand.S2C_PARTY_INVITE_RES:
      return "S2C_PARTY_INVITE_RES";
    case PacketCommand.S2C_PARTY_INVITE_NOT:
      return "S2C_PARTY_INVITE_NOT";
    case PacketCommand.C2S_PARTY_INVITE_ANSWER_REQ:
      return "C2S_PARTY_INVITE_ANSWER_REQ";
    case PacketCommand.S2C_PARTY_INVITE_ANSWER_RES:
      return "S2C_PARTY_INVITE_ANSWER_RES";
    case PacketCommand.S2C_PARTY_INVITE_ANSWER_RESULT_NOT:
      return "S2C_PARTY_INVITE_ANSWER_RESULT_NOT";
    case PacketCommand.C2S_PARTY_EXIT_REQ:
      return "C2S_PARTY_EXIT_REQ";
    case PacketCommand.S2C_PARTY_EXIT_RES:
      return "S2C_PARTY_EXIT_RES";
    case PacketCommand.S2C_PARTY_MEMBER_INFO_NOT:
      return "S2C_PARTY_MEMBER_INFO_NOT";
    case PacketCommand.C2S_PARTY_READY_REQ:
      return "C2S_PARTY_READY_REQ";
    case PacketCommand.S2C_PARTY_READY_RES:
      return "S2C_PARTY_READY_RES";
    case PacketCommand.S2C_PARTY_EQUIP_ITEM_CHANGE_NOT:
      return "S2C_PARTY_EQUIP_ITEM_CHANGE_NOT";
    case PacketCommand.S2C_PARTY_REGION_CHANGE_NOT:
      return "S2C_PARTY_REGION_CHANGE_NOT";
    case PacketCommand.S2C_PARTY_LOCATION_UPDATE_NOT:
      return "S2C_PARTY_LOCATION_UPDATE_NOT";
    case PacketCommand.S2C_PARTY_CHARACTER_SKIN_LIST_NOT:
      return "S2C_PARTY_CHARACTER_SKIN_LIST_NOT";
    case PacketCommand.S2C_PARTY_CHARACTER_SKIN_CHANGE_NOT:
      return "S2C_PARTY_CHARACTER_SKIN_CHANGE_NOT";
    case PacketCommand.S2C_PARTY_ITEM_SKIN_LIST_NOT:
      return "S2C_PARTY_ITEM_SKIN_LIST_NOT";
    case PacketCommand.S2C_PARTY_ITEM_SKIN_CHANGE_NOT:
      return "S2C_PARTY_ITEM_SKIN_CHANGE_NOT";
    case PacketCommand.S2C_PARTY_GAME_DIFFICULTY_CHANGE_NOT:
      return "S2C_PARTY_GAME_DIFFICULTY_CHANGE_NOT";
    case PacketCommand.C2S_PARTY_MEMBER_KICK_REQ:
      return "C2S_PARTY_MEMBER_KICK_REQ";
    case PacketCommand.S2C_PARTY_MEMBER_KICK_RES:
      return "S2C_PARTY_MEMBER_KICK_RES";
    case PacketCommand.C2S_PARTY_CHAT_REQ:
      return "C2S_PARTY_CHAT_REQ";
    case PacketCommand.S2C_PARTY_CHAT_RES:
      return "S2C_PARTY_CHAT_RES";
    case PacketCommand.S2C_PARTY_CHAT_NOT:
      return "S2C_PARTY_CHAT_NOT";
    case PacketCommand.S2C_PARTY_READY_CHANGE_NOT:
      return "S2C_PARTY_READY_CHANGE_NOT";
    case PacketCommand.S2C_PARTY_KICKED_OUT_NOT:
      return "S2C_PARTY_KICKED_OUT_NOT";
    case PacketCommand.S2C_PARTY_MEMBER_LOBBY_EMOTE_NOT:
      return "S2C_PARTY_MEMBER_LOBBY_EMOTE_NOT";
    case PacketCommand.C2S_PARTY_START_LOBBY_EMOTE_REQ:
      return "C2S_PARTY_START_LOBBY_EMOTE_REQ";
    case PacketCommand.S2C_PARTY_START_LOBBY_EMOTE_RES:
      return "S2C_PARTY_START_LOBBY_EMOTE_RES";
    case PacketCommand.S2C_PARTY_START_LOBBY_EMOTE_NOT:
      return "S2C_PARTY_START_LOBBY_EMOTE_NOT";
    case PacketCommand.MAX_PARTY_PACKET:
      return "MAX_PARTY_PACKET";
    case PacketCommand.MIN_GM_PACKET:
      return "MIN_GM_PACKET";
    case PacketCommand.C2S_GM_PARTY_ALL_RANDOM_REQ:
      return "C2S_GM_PARTY_ALL_RANDOM_REQ";
    case PacketCommand.S2C_GM_PARTY_ALL_RANDOM_RES:
      return "S2C_GM_PARTY_ALL_RANDOM_RES";
    case PacketCommand.C2S_GM_ENTER_GAME_SPECTATOR_REQ:
      return "C2S_GM_ENTER_GAME_SPECTATOR_REQ";
    case PacketCommand.S2C_GM_ENTER_GAME_SPECTATOR_RES:
      return "S2C_GM_ENTER_GAME_SPECTATOR_RES";
    case PacketCommand.MAX_GM_PACKET:
      return "MAX_GM_PACKET";
    case PacketCommand.MIN_MERCHANT_PACKET:
      return "MIN_MERCHANT_PACKET";
    case PacketCommand.C2S_MERCHANT_LIST_REQ:
      return "C2S_MERCHANT_LIST_REQ";
    case PacketCommand.S2C_MERCHANT_LIST_RES:
      return "S2C_MERCHANT_LIST_RES";
    case PacketCommand.C2S_MERCHANT_STOCK_BUY_ITEM_LIST_REQ:
      return "C2S_MERCHANT_STOCK_BUY_ITEM_LIST_REQ";
    case PacketCommand.S2C_MERCHANT_STOCK_BUY_ITEM_LIST_RES:
      return "S2C_MERCHANT_STOCK_BUY_ITEM_LIST_RES";
    case PacketCommand.C2S_MERCHANT_STOCK_SELL_BACK_ITEM_LIST_REQ:
      return "C2S_MERCHANT_STOCK_SELL_BACK_ITEM_LIST_REQ";
    case PacketCommand.S2C_MERCHANT_STOCK_SELL_BACK_ITEM_LIST_RES:
      return "S2C_MERCHANT_STOCK_SELL_BACK_ITEM_LIST_RES";
    case PacketCommand.C2S_MERCHANT_STOCK_BUY_REQ:
      return "C2S_MERCHANT_STOCK_BUY_REQ";
    case PacketCommand.S2C_MERCHANT_STOCK_BUY_RES:
      return "S2C_MERCHANT_STOCK_BUY_RES";
    case PacketCommand.C2S_MERCHANT_STOCK_SELL_BACK_REQ:
      return "C2S_MERCHANT_STOCK_SELL_BACK_REQ";
    case PacketCommand.S2C_MERCHANT_STOCK_SELL_BACK_RES:
      return "S2C_MERCHANT_STOCK_SELL_BACK_RES";
    case PacketCommand.C2S_MERCHANT_SERVICE_CRAFT_LIST_REQ:
      return "C2S_MERCHANT_SERVICE_CRAFT_LIST_REQ";
    case PacketCommand.S2C_MERCHANT_SERVICE_CRAFT_LIST_RES:
      return "S2C_MERCHANT_SERVICE_CRAFT_LIST_RES";
    case PacketCommand.C2S_MERCHANT_SERVICE_CRAFT_REQ:
      return "C2S_MERCHANT_SERVICE_CRAFT_REQ";
    case PacketCommand.S2C_MERCHANT_SERVICE_CRAFT_RES:
      return "S2C_MERCHANT_SERVICE_CRAFT_RES";
    case PacketCommand.C2S_MERCHANT_SERVICE_REPAIR_REQ:
      return "C2S_MERCHANT_SERVICE_REPAIR_REQ";
    case PacketCommand.S2C_MERCHANT_SERVICE_REPAIR_RES:
      return "S2C_MERCHANT_SERVICE_REPAIR_RES";
    case PacketCommand.C2S_MERCHANT_QUEST_LIST_REQ:
      return "C2S_MERCHANT_QUEST_LIST_REQ";
    case PacketCommand.S2C_MERCHANT_QUEST_LIST_RES:
      return "S2C_MERCHANT_QUEST_LIST_RES";
    case PacketCommand.C2S_MERCHANT_QUEST_REQ:
      return "C2S_MERCHANT_QUEST_REQ";
    case PacketCommand.S2C_MERCHANT_QUEST_RES:
      return "S2C_MERCHANT_QUEST_RES";
    case PacketCommand.MAX_MERCHANT_PACKET:
      return "MAX_MERCHANT_PACKET";
    case PacketCommand.MIN_KARMA_PACKET:
      return "MIN_KARMA_PACKET";
    case PacketCommand.C2S_KARMA_REPORT_LIST_REQ:
      return "C2S_KARMA_REPORT_LIST_REQ";
    case PacketCommand.S2C_KARMA_REPORT_LIST_RES:
      return "S2C_KARMA_REPORT_LIST_RES";
    case PacketCommand.C2S_KARMA_REPORT_ACTION_REQ:
      return "C2S_KARMA_REPORT_ACTION_REQ";
    case PacketCommand.S2C_KARMA_REPORT_ACTION_RES:
      return "S2C_KARMA_REPORT_ACTION_RES";
    case PacketCommand.S2C_KARMA_RATING_UPDATE_NOT:
      return "S2C_KARMA_RATING_UPDATE_NOT";
    case PacketCommand.MAX_KARMA_PACKET:
      return "MAX_KARMA_PACKET";
    case PacketCommand.MIN_TRADE_PACKET:
      return "MIN_TRADE_PACKET";
    case PacketCommand.C2S_TRADE_CHANNEL_LIST_REQ:
      return "C2S_TRADE_CHANNEL_LIST_REQ";
    case PacketCommand.S2C_TRADE_CHANNEL_LIST_RES:
      return "S2C_TRADE_CHANNEL_LIST_RES";
    case PacketCommand.C2S_TRADE_CHANNEL_SELECT_REQ:
      return "C2S_TRADE_CHANNEL_SELECT_REQ";
    case PacketCommand.S2C_TRADE_CHANNEL_SELECT_RES:
      return "S2C_TRADE_CHANNEL_SELECT_RES";
    case PacketCommand.C2S_TRADE_CHANNEL_EXIT_REQ:
      return "C2S_TRADE_CHANNEL_EXIT_REQ";
    case PacketCommand.S2C_TRADE_CHANNEL_EXIT_RES:
      return "S2C_TRADE_CHANNEL_EXIT_RES";
    case PacketCommand.C2S_TRADE_CHANNEL_USER_LIST_REQ:
      return "C2S_TRADE_CHANNEL_USER_LIST_REQ";
    case PacketCommand.S2C_TRADE_CHANNEL_USER_LIST_RES:
      return "S2C_TRADE_CHANNEL_USER_LIST_RES";
    case PacketCommand.S2C_TRADE_CHANNEL_USER_UPDATE_NOT:
      return "S2C_TRADE_CHANNEL_USER_UPDATE_NOT";
    case PacketCommand.C2S_TRADE_CHANNEL_CHAT_REQ:
      return "C2S_TRADE_CHANNEL_CHAT_REQ";
    case PacketCommand.S2C_TRADE_CHANNEL_CHAT_RES:
      return "S2C_TRADE_CHANNEL_CHAT_RES";
    case PacketCommand.C2S_TRADE_CHANNEL_CHAT_TEXT_RANGE_REQ:
      return "C2S_TRADE_CHANNEL_CHAT_TEXT_RANGE_REQ";
    case PacketCommand.S2C_TRADE_CHANNEL_CHAT_TEXT_RANGE_RES:
      return "S2C_TRADE_CHANNEL_CHAT_TEXT_RANGE_RES";
    case PacketCommand.C2S_TRADE_MEMBERSHIP_REQUIREMENT_REQ:
      return "C2S_TRADE_MEMBERSHIP_REQUIREMENT_REQ";
    case PacketCommand.S2C_TRADE_MEMBERSHIP_REQUIREMENT_RES:
      return "S2C_TRADE_MEMBERSHIP_REQUIREMENT_RES";
    case PacketCommand.C2S_TRADE_MEMBERSHIP_REQ:
      return "C2S_TRADE_MEMBERSHIP_REQ";
    case PacketCommand.S2C_TRADE_MEMBERSHIP_RES:
      return "S2C_TRADE_MEMBERSHIP_RES";
    case PacketCommand.C2S_TRADE_REQUEST_REQ:
      return "C2S_TRADE_REQUEST_REQ";
    case PacketCommand.S2C_TRADE_REQUEST_RES:
      return "S2C_TRADE_REQUEST_RES";
    case PacketCommand.S2C_TRADE_REQUEST_NOT:
      return "S2C_TRADE_REQUEST_NOT";
    case PacketCommand.C2S_TRADE_ANSWER_REQ:
      return "C2S_TRADE_ANSWER_REQ";
    case PacketCommand.S2C_TRADE_ANSWER_RES:
      return "S2C_TRADE_ANSWER_RES";
    case PacketCommand.S2C_TRADE_ANSWER_REFUSAL_NOT:
      return "S2C_TRADE_ANSWER_REFUSAL_NOT";
    case PacketCommand.S2C_TRADING_BEGIN_NOT:
      return "S2C_TRADING_BEGIN_NOT";
    case PacketCommand.C2S_TRADING_CLOSE_REQ:
      return "C2S_TRADING_CLOSE_REQ";
    case PacketCommand.S2C_TRADING_CLOSE_RES:
      return "S2C_TRADING_CLOSE_RES";
    case PacketCommand.C2S_TRADING_CHAT_REQ:
      return "C2S_TRADING_CHAT_REQ";
    case PacketCommand.S2C_TRADING_CHAT_RES:
      return "S2C_TRADING_CHAT_RES";
    case PacketCommand.C2S_TRADING_ITEM_UPDATE_REQ:
      return "C2S_TRADING_ITEM_UPDATE_REQ";
    case PacketCommand.S2C_TRADING_ITEM_UPDATE_RES:
      return "S2C_TRADING_ITEM_UPDATE_RES";
    case PacketCommand.C2S_TRADING_READY_REQ:
      return "C2S_TRADING_READY_REQ";
    case PacketCommand.S2C_TRADING_READY_RES:
      return "S2C_TRADING_READY_RES";
    case PacketCommand.S2C_TRADING_READY_NOT:
      return "S2C_TRADING_READY_NOT";
    case PacketCommand.S2C_TRADING_CONFIRM_NOT:
      return "S2C_TRADING_CONFIRM_NOT";
    case PacketCommand.C2S_TRADING_CONFIRM_READY_REQ:
      return "C2S_TRADING_CONFIRM_READY_REQ";
    case PacketCommand.S2C_TRADING_CONFIRM_READY_RES:
      return "S2C_TRADING_CONFIRM_READY_RES";
    case PacketCommand.S2C_TRADING_CONFIRM_READY_NOT:
      return "S2C_TRADING_CONFIRM_READY_NOT";
    case PacketCommand.C2S_TRADING_CONFIRM_CANCEL_REQ:
      return "C2S_TRADING_CONFIRM_CANCEL_REQ";
    case PacketCommand.S2C_TRADING_CONFIRM_CANCEL_RES:
      return "S2C_TRADING_CONFIRM_CANCEL_RES";
    case PacketCommand.S2C_TRADING_RESULT_NOT:
      return "S2C_TRADING_RESULT_NOT";
    case PacketCommand.MAX_TRADE_PACKET:
      return "MAX_TRADE_PACKET";
    case PacketCommand.MIN_CUSTOMIZE_PACKET:
      return "MIN_CUSTOMIZE_PACKET";
    case PacketCommand.C2S_CUSTOMIZE_NEW_ITEM_CHECK_REQ:
      return "C2S_CUSTOMIZE_NEW_ITEM_CHECK_REQ";
    case PacketCommand.S2C_CUSTOMIZE_NEW_ITEM_CHECK_RES:
      return "S2C_CUSTOMIZE_NEW_ITEM_CHECK_RES";
    case PacketCommand.S2C_CUSTOMIZE_NEW_ITEM_ALERT_NOT:
      return "S2C_CUSTOMIZE_NEW_ITEM_ALERT_NOT";
    case PacketCommand.C2S_CUSTOMIZE_CHARACTER_INFO_REQ:
      return "C2S_CUSTOMIZE_CHARACTER_INFO_REQ";
    case PacketCommand.S2C_CUSTOMIZE_CHARACTER_INFO_RES:
      return "S2C_CUSTOMIZE_CHARACTER_INFO_RES";
    case PacketCommand.C2S_CUSTOMIZE_ITEM_INFO_REQ:
      return "C2S_CUSTOMIZE_ITEM_INFO_REQ";
    case PacketCommand.S2C_CUSTOMIZE_ITEM_INFO_RES:
      return "S2C_CUSTOMIZE_ITEM_INFO_RES";
    case PacketCommand.C2S_CUSTOMIZE_EMOTE_INFO_REQ:
      return "C2S_CUSTOMIZE_EMOTE_INFO_REQ";
    case PacketCommand.S2C_CUSTOMIZE_EMOTE_INFO_RES:
      return "S2C_CUSTOMIZE_EMOTE_INFO_RES";
    case PacketCommand.C2S_CUSTOMIZE_ACTION_INFO_REQ:
      return "C2S_CUSTOMIZE_ACTION_INFO_REQ";
    case PacketCommand.S2C_CUSTOMIZE_ACTION_INFO_RES:
      return "S2C_CUSTOMIZE_ACTION_INFO_RES";
    case PacketCommand.C2S_CUSTOMIZE_LOBBY_EMOTE_INFO_REQ:
      return "C2S_CUSTOMIZE_LOBBY_EMOTE_INFO_REQ";
    case PacketCommand.S2C_CUSTOMIZE_LOBBY_EMOTE_INFO_RES:
      return "S2C_CUSTOMIZE_LOBBY_EMOTE_INFO_RES";
    case PacketCommand.C2S_CUSTOMIZE_CHARACTER_MOUNT_REQ:
      return "C2S_CUSTOMIZE_CHARACTER_MOUNT_REQ";
    case PacketCommand.S2C_CUSTOMIZE_CHARACTER_MOUNT_RES:
      return "S2C_CUSTOMIZE_CHARACTER_MOUNT_RES";
    case PacketCommand.C2S_CUSTOMIZE_CHARACTER_UNMOUNT_REQ:
      return "C2S_CUSTOMIZE_CHARACTER_UNMOUNT_REQ";
    case PacketCommand.S2C_CUSTOMIZE_CHARACTER_UNMOUNT_RES:
      return "S2C_CUSTOMIZE_CHARACTER_UNMOUNT_RES";
    case PacketCommand.C2S_CUSTOMIZE_ITEM_MOUNT_REQ:
      return "C2S_CUSTOMIZE_ITEM_MOUNT_REQ";
    case PacketCommand.S2C_CUSTOMIZE_ITEM_MOUNT_RES:
      return "S2C_CUSTOMIZE_ITEM_MOUNT_RES";
    case PacketCommand.C2S_CUSTOMIZE_ITEM_UNMOUNT_REQ:
      return "C2S_CUSTOMIZE_ITEM_UNMOUNT_REQ";
    case PacketCommand.S2C_CUSTOMIZE_ITEM_UNMOUNT_RES:
      return "S2C_CUSTOMIZE_ITEM_UNMOUNT_RES";
    case PacketCommand.C2S_CUSTOMIZE_EMOTE_MOUNT_REQ:
      return "C2S_CUSTOMIZE_EMOTE_MOUNT_REQ";
    case PacketCommand.S2C_CUSTOMIZE_EMOTE_MOUNT_RES:
      return "S2C_CUSTOMIZE_EMOTE_MOUNT_RES";
    case PacketCommand.C2S_CUSTOMIZE_EMOTE_UNMOUNT_REQ:
      return "C2S_CUSTOMIZE_EMOTE_UNMOUNT_REQ";
    case PacketCommand.S2C_CUSTOMIZE_EMOTE_UNMOUNT_RES:
      return "S2C_CUSTOMIZE_EMOTE_UNMOUNT_RES";
    case PacketCommand.C2S_CUSTOMIZE_ACTION_MOUNT_REQ:
      return "C2S_CUSTOMIZE_ACTION_MOUNT_REQ";
    case PacketCommand.S2C_CUSTOMIZE_ACTION_MOUNT_RES:
      return "S2C_CUSTOMIZE_ACTION_MOUNT_RES";
    case PacketCommand.C2S_CUSTOMIZE_ACTION_UNMOUNT_REQ:
      return "C2S_CUSTOMIZE_ACTION_UNMOUNT_REQ";
    case PacketCommand.S2C_CUSTOMIZE_ACTION_UNMOUNT_RES:
      return "S2C_CUSTOMIZE_ACTION_UNMOUNT_RES";
    case PacketCommand.C2S_CUSTOMIZE_LOBBY_EMOTE_MOUNT_REQ:
      return "C2S_CUSTOMIZE_LOBBY_EMOTE_MOUNT_REQ";
    case PacketCommand.S2C_CUSTOMIZE_LOBBY_EMOTE_MOUNT_RES:
      return "S2C_CUSTOMIZE_LOBBY_EMOTE_MOUNT_RES";
    case PacketCommand.C2S_CUSTOMIZE_LOBBY_EMOTE_UNMOUNT_REQ:
      return "C2S_CUSTOMIZE_LOBBY_EMOTE_UNMOUNT_REQ";
    case PacketCommand.S2C_CUSTOMIZE_LOBBY_EMOTE_UNMOUNT_RES:
      return "S2C_CUSTOMIZE_LOBBY_EMOTE_UNMOUNT_RES";
    case PacketCommand.MAX_CUSTOMIZE_PACKET:
      return "MAX_CUSTOMIZE_PACKET";
    case PacketCommand.MIN_SHOP_PACKET:
      return "MIN_SHOP_PACKET";
    case PacketCommand.C2S_SHOP_CHARACTER_SKIN_LIST_REQ:
      return "C2S_SHOP_CHARACTER_SKIN_LIST_REQ";
    case PacketCommand.S2C_SHOP_CHARACTER_SKIN_LIST_RES:
      return "S2C_SHOP_CHARACTER_SKIN_LIST_RES";
    case PacketCommand.C2S_SHOP_ITEM_SKIN_LIST_REQ:
      return "C2S_SHOP_ITEM_SKIN_LIST_REQ";
    case PacketCommand.S2C_SHOP_ITEM_SKIN_LIST_RES:
      return "S2C_SHOP_ITEM_SKIN_LIST_RES";
    case PacketCommand.C2S_SHOP_EMOTE_LIST_REQ:
      return "C2S_SHOP_EMOTE_LIST_REQ";
    case PacketCommand.S2C_SHOP_EMOTE_LIST_RES:
      return "S2C_SHOP_EMOTE_LIST_RES";
    case PacketCommand.C2S_SHOP_ACTION_LIST_REQ:
      return "C2S_SHOP_ACTION_LIST_REQ";
    case PacketCommand.S2C_SHOP_ACTION_LIST_RES:
      return "S2C_SHOP_ACTION_LIST_RES";
    case PacketCommand.C2S_SHOP_LOBBY_EMOTE_LIST_REQ:
      return "C2S_SHOP_LOBBY_EMOTE_LIST_REQ";
    case PacketCommand.S2C_SHOP_LOBBY_EMOTE_LIST_RES:
      return "S2C_SHOP_LOBBY_EMOTE_LIST_RES";
    case PacketCommand.C2S_SHOP_CHARACTER_SKIN_BUY_REQ:
      return "C2S_SHOP_CHARACTER_SKIN_BUY_REQ";
    case PacketCommand.S2C_SHOP_CHARACTER_SKIN_BUY_RES:
      return "S2C_SHOP_CHARACTER_SKIN_BUY_RES";
    case PacketCommand.C2S_SHOP_ITEM_SKIN_BUY_REQ:
      return "C2S_SHOP_ITEM_SKIN_BUY_REQ";
    case PacketCommand.S2C_SHOP_ITEM_SKIN_BUY_RES:
      return "S2C_SHOP_ITEM_SKIN_BUY_RES";
    case PacketCommand.C2S_SHOP_EMOTE_BUY_REQ:
      return "C2S_SHOP_EMOTE_BUY_REQ";
    case PacketCommand.S2C_SHOP_EMOTE_BUY_RES:
      return "S2C_SHOP_EMOTE_BUY_RES";
    case PacketCommand.C2S_SHOP_ACTION_BUY_REQ:
      return "C2S_SHOP_ACTION_BUY_REQ";
    case PacketCommand.S2C_SHOP_ACTION_BUY_RES:
      return "S2C_SHOP_ACTION_BUY_RES";
    case PacketCommand.C2S_SHOP_LOBBY_EMOTE_BUY_REQ:
      return "C2S_SHOP_LOBBY_EMOTE_BUY_REQ";
    case PacketCommand.S2C_SHOP_LOBBY_EMOTE_BUY_RES:
      return "S2C_SHOP_LOBBY_EMOTE_BUY_RES";
    case PacketCommand.MAX_SHOP_PACKET:
      return "MAX_SHOP_PACKET";
    case PacketCommand.MIN_CLASS_PACKET:
      return "MIN_CLASS_PACKET";
    case PacketCommand.C2S_CLASS_LEVEL_INFO_REQ:
      return "C2S_CLASS_LEVEL_INFO_REQ";
    case PacketCommand.S2C_CLASS_LEVEL_INFO_RES:
      return "S2C_CLASS_LEVEL_INFO_RES";
    case PacketCommand.C2S_CLASS_EQUIP_INFO_REQ:
      return "C2S_CLASS_EQUIP_INFO_REQ";
    case PacketCommand.S2C_CLASS_EQUIP_INFO_RES:
      return "S2C_CLASS_EQUIP_INFO_RES";
    case PacketCommand.C2S_CLASS_PERK_LIST_REQ:
      return "C2S_CLASS_PERK_LIST_REQ";
    case PacketCommand.S2C_CLASS_PERK_LIST_RES:
      return "S2C_CLASS_PERK_LIST_RES";
    case PacketCommand.C2S_CLASS_SKILL_LIST_REQ:
      return "C2S_CLASS_SKILL_LIST_REQ";
    case PacketCommand.S2C_CLASS_SKILL_LIST_RES:
      return "S2C_CLASS_SKILL_LIST_RES";
    case PacketCommand.C2S_CLASS_SPELL_LIST_REQ:
      return "C2S_CLASS_SPELL_LIST_REQ";
    case PacketCommand.S2C_CLASS_SPELL_LIST_RES:
      return "S2C_CLASS_SPELL_LIST_RES";
    case PacketCommand.C2S_CLASS_ITEM_MOVE_REQ:
      return "C2S_CLASS_ITEM_MOVE_REQ";
    case PacketCommand.S2C_CLASS_ITEM_MOVE_RES:
      return "S2C_CLASS_ITEM_MOVE_RES";
    case PacketCommand.C2S_CLASS_SPELL_SLOT_MOVE_REQ:
      return "C2S_CLASS_SPELL_SLOT_MOVE_REQ";
    case PacketCommand.S2C_CLASS_SPELL_SLOT_MOVE_RES:
      return "S2C_CLASS_SPELL_SLOT_MOVE_RES";
    case PacketCommand.C2S_CLASS_SPELL_SEQUENCE_CHANGE_REQ:
      return "C2S_CLASS_SPELL_SEQUENCE_CHANGE_REQ";
    case PacketCommand.S2C_CLASS_SPELL_SEQUENCE_CHANGE_RES:
      return "S2C_CLASS_SPELL_SEQUENCE_CHANGE_RES";
    case PacketCommand.MAX_CLASS_PACKET:
      return "MAX_CLASS_PACKET";
    case PacketCommand.MIN_GATHERING_HALL_PACKET:
      return "MIN_GATHERING_HALL_PACKET";
    case PacketCommand.C2S_GATHERING_HALL_CHANNEL_LIST_REQ:
      return "C2S_GATHERING_HALL_CHANNEL_LIST_REQ";
    case PacketCommand.S2C_GATHERING_HALL_CHANNEL_LIST_RES:
      return "S2C_GATHERING_HALL_CHANNEL_LIST_RES";
    case PacketCommand.C2S_GATHERING_HALL_CHANNEL_SELECT_REQ:
      return "C2S_GATHERING_HALL_CHANNEL_SELECT_REQ";
    case PacketCommand.S2C_GATHERING_HALL_CHANNEL_SELECT_RES:
      return "S2C_GATHERING_HALL_CHANNEL_SELECT_RES";
    case PacketCommand.C2S_GATHERING_HALL_CHANNEL_EXIT_REQ:
      return "C2S_GATHERING_HALL_CHANNEL_EXIT_REQ";
    case PacketCommand.S2C_GATHERING_HALL_CHANNEL_EXIT_RES:
      return "S2C_GATHERING_HALL_CHANNEL_EXIT_RES";
    case PacketCommand.C2S_GATHERING_HALL_CHANNEL_USER_LIST_REQ:
      return "C2S_GATHERING_HALL_CHANNEL_USER_LIST_REQ";
    case PacketCommand.S2C_GATHERING_HALL_CHANNEL_USER_LIST_RES:
      return "S2C_GATHERING_HALL_CHANNEL_USER_LIST_RES";
    case PacketCommand.S2C_GATHERING_HALL_CHANNEL_USER_UPDATE_NOT:
      return "S2C_GATHERING_HALL_CHANNEL_USER_UPDATE_NOT";
    case PacketCommand.C2S_GATHERING_HALL_CHANNEL_CHAT_REQ:
      return "C2S_GATHERING_HALL_CHANNEL_CHAT_REQ";
    case PacketCommand.S2C_GATHERING_HALL_CHANNEL_CHAT_RES:
      return "S2C_GATHERING_HALL_CHANNEL_CHAT_RES";
    case PacketCommand.S2C_GATHERING_HALL_CHANNEL_CHAT_NOT:
      return "S2C_GATHERING_HALL_CHANNEL_CHAT_NOT";
    case PacketCommand.C2S_GATHERING_HALL_TARGET_EQUIPPED_ITEM_REQ:
      return "C2S_GATHERING_HALL_TARGET_EQUIPPED_ITEM_REQ";
    case PacketCommand.S2C_GATHERING_HALL_TARGET_EQUIPPED_ITEM_RES:
      return "S2C_GATHERING_HALL_TARGET_EQUIPPED_ITEM_RES";
    case PacketCommand.MAX_GATHERING_HALL_PACKET:
      return "MAX_GATHERING_HALL_PACKET";
    case PacketCommand.MIN_META_PACKET:
      return "MIN_META_PACKET";
    case PacketCommand.C2S_META_LOCATION_REQ:
      return "C2S_META_LOCATION_REQ";
    case PacketCommand.S2C_META_LOCATION_RES:
      return "S2C_META_LOCATION_RES";
    case PacketCommand.C2S_BLOCK_CHARACTER_REQ:
      return "C2S_BLOCK_CHARACTER_REQ";
    case PacketCommand.S2C_BLOCK_CHARACTER_RES:
      return "S2C_BLOCK_CHARACTER_RES";
    case PacketCommand.C2S_UNBLOCK_CHARACTER_REQ:
      return "C2S_UNBLOCK_CHARACTER_REQ";
    case PacketCommand.S2C_UNBLOCK_CHARACTER_RES:
      return "S2C_UNBLOCK_CHARACTER_RES";
    case PacketCommand.C2S_BLOCK_CHARACTER_LIST_REQ:
      return "C2S_BLOCK_CHARACTER_LIST_REQ";
    case PacketCommand.S2C_BLOCK_CHARACTER_LIST_RES:
      return "S2C_BLOCK_CHARACTER_LIST_RES";
    case PacketCommand.C2S_HACK_LOG_REQ:
      return "C2S_HACK_LOG_REQ";
    case PacketCommand.S2C_HACK_LOG_RES:
      return "S2C_HACK_LOG_RES";
    case PacketCommand.S2C_SERVICE_POLICY_NOT:
      return "S2C_SERVICE_POLICY_NOT";
    case PacketCommand.S2C_HACK_CHECK_DLL_LIST_NOT:
      return "S2C_HACK_CHECK_DLL_LIST_NOT";
    case PacketCommand.C2S_RE_LOGIN_REQ:
      return "C2S_RE_LOGIN_REQ";
    case PacketCommand.S2C_RE_LOGIN_RES:
      return "S2C_RE_LOGIN_RES";
    case PacketCommand.S2C_CLOSED_GAME_NOT:
      return "S2C_CLOSED_GAME_NOT";
    case PacketCommand.C2S_USER_CHARACTER_INFO_REQ:
      return "C2S_USER_CHARACTER_INFO_REQ";
    case PacketCommand.S2C_USER_CHARACTER_INFO_RES:
      return "S2C_USER_CHARACTER_INFO_RES";
    case PacketCommand.S2C_OPERATE_ANNOUNCE_NOT:
      return "S2C_OPERATE_ANNOUNCE_NOT";
    case PacketCommand.MAX_META_PACKET:
      return "MAX_META_PACKET";
    case PacketCommand.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PacketResult {
  RESULT_NONE = 0,
  SUCCESS = 1,
  FAIL_GENERAL = 10,
  FAIL_SHORTAGE = 11,
  FAIL_NO_VALUE = 12,
  FAIL_DUPLICATE_NICKNAME = 13,
  FAIL_CHARACTER_NICKNAME_LENGTH_SHORTAGE = 14,
  FAIL_CHARACTER_NICKNAME_LENGTH_OVER = 15,
  FAIL_CHATACTER_CLASS = 16,
  FAIL_CHARACTER_BAD_NICKNAME = 17,
  FAIL_CHARACTER_MAX_COUNT = 18,
  FAIL_PARTY_INVITE_OFFLINE_CHARACTER = 25,
  FAIL_PARTY_INVITE_NO_LOBBY_CHARACTER = 26,
  FAIL_PARTY_INVITE_ALREADY_PARTY = 27,
  FAIL_PARTY_INVITE_MEMBER_FULL = 28,
  FAIL_EXIT_PARTY_NO_PARTY = 30,
  FAIL_EXIT_ALREADY_GAME_START_PARTY = 31,
  FAIL_PARTY_INVITE_ANSWER_DECLINED = 32,
  FAIL_PARTY_TARGET_BLOCK_CHARACTER = 33,
  FAIL_PARTY_YOU_BLOCKED_CHARACTER = 34,
  FAIL_PARTY_DUPLICATE_REQUEST = 35,
  FAIL_PARTY_INVITE_TARGET_TRADING = 36,
  FAIL_PARTY_CHAT_NO_PARTY = 37,
  FAIL_PARTY_IS_MATCHING = 38,
  FAIL_PARTY_READY_SHORTAGE_ENTRANCE_FEE = 39,
  FAIL_PARTY_READY_SHORTAGE_ENTRANCE_LEVEL = 40,
  FAIL_CHARACTER_SELECT_ENTER_IS_MATCHING = 50,
  FAIL_CHARACTER_SELECT_ENTER_NOT_LOBBY = 51,
  FAIL_PARTY_READY_IS_MATCHING = 55,
  FAIL_MERCHANT_NO_OPEN = 60,
  FAIL_CLASS_NOT_FOUND_OLD_ITEM = 100,
  FAIL_CLASS_NOT_FOUND_NEW_ITEM = 101,
  FAIL_CLASS_NEW_ITEM_CONDITION = 102,
  FAIL_CLASS_SWAP = 103,
  FAIL_CLASS_EQUIP_WEAPON_MASTERY_OLD_ITEM = 104,
  FAIL_CLASS_NOT_FOUND_SPELL_ITEM = 105,
  FAIL_CLASS_DUPLICATE_EQUIP_SPELL_ITEM = 106,
  FAIL_CHAT_MAX_ROOM_USER = 130,
  FAIL_CHAT_SELECT_ALREADY_ROOM = 131,
  FAIL_CHAT_SELECT_NOT_MEMBERSHIP = 132,
  FAIL_CHAT_SELECT_NOT_EXISTS_ROOM = 133,
  FAIL_CHAT_WHISPER_NOT_FOUND_USER = 134,
  FAIL_CHAT_EXIT_NOT_EXISTS_ROOM = 140,
  FAIL_CHAT_EXIT_CANNOT_LEAVE_DURING_TRADE = 141,
  FAIL_TRADE_REQUIREMENT_SHORTAGE_LV = 150,
  FAIL_TRADE_REQUIREMENT_SHORTAGE_GOLD = 151,
  FAIL_TRADE_ALREADY_MEMBERSHIP = 152,
  FAIL_TRADE_TARGET_BLOCK = 153,
  FAIL_TRADE_DUPLICATE_REQUEST = 154,
  FAIL_TRADE_REQUEST_NOT_FOUND_CHANNEL = 155,
  FAIL_TRADE_ANSWER_NO_CHANNEL = 156,
  FAIL_TRADING_NOT_FOUND_USER = 161,
  FAIL_TRADING_ALREADY_TRADING = 162,
  FAIL_TRADING_NO_MEMBERSHIP = 163,
  FAIL_TRADING_SHORTAGE_MINE_GOLD = 164,
  FAIL_TRADING_SHORTAGE_TARGET_GOLD = 165,
  FAIL_TRADING_INGAME_TARGET = 166,
  FAIL_TRADING_NOT_FOUND_ITEM = 167,
  FAIL_TRADING_ALREADY_ITEM = 168,
  FAIL_TRADING_NOT_FOUND_EMPTY_SLOT = 169,
  FAIL_TRADING_READY_SHORTAGE_GOLD = 170,
  FAIL_TRADING_NOT_FOUND_EMPTY_INVENTORY_SLOT = 171,
  FAIL_BLOCK_CHARACTER_ALREADY = 180,
  FAIL_BLOCK_CHARACTER_LIMIT = 181,
  FAIL_BLOCK_CHARACTER_NOT_FOUND = 182,
  FAIL_UNBLOCK_CHARACTER_NOT_FOUND = 183,
  FAIL_CHAT_NOT_FOUND_USER = 190,
  FAIL_FRIEND_FIND_NOT_FOUND = 201,
  FAIL_CUSTOMIZE_NOT_FOUND_ITEM = 250,
  FAIL_CUSTOMIZE_UNEQUIPPED_CLASS = 251,
  FAIL_CUSTOMIZE_NO_MOUNTING_SLOT_AVAILABLE = 252,
  FAIL_CUSTOMIZE_MAXIMUM_LIMIT = 253,
  FAIL_SHOP_ALREADY_ITEM = 270,
  FAIL_SHOP_ITEM_SHORTAGE_CURRENCY = 271,
  FAIL_KARMA_NOT_FOUND_USER = 300,
  FAIL_KARMA_SHORTAGE_TICKET_COUNT = 301,
  FAIL_KARMA_IMPOSSIBLE_ACTION = 302,
  FAIL_KARMA_ALREADY_VOTES = 303,
  FAIL_KARMA_BAD_CHARACTER_IMPOSSIBLE_VOTE = 304,
  FAIL_GATHERING_HALL_NOT_FOUND_USER = 320,
  FAIL_ENTER_GAME_SPECTATOR_NOT_PLAY_GAME = 500,
  FAIL_ENTER_GAME_SPECTATOR_NOT_FOUND_USER = 501,
  FAIL_NOT_GM = 502,
  FAIL_LOBBY_ENTER_COUPON_CODE_INVALID = 550,
  FAIL_LOBBY_ENTER_COUPON_CODE_ALREADY = 551,
  FAIL_LOBBY_ENTER_COUPON_CODE_NOT_VALID_TIME = 552,
  UNRECOGNIZED = -1,
}

export function packetResultFromJSON(object: any): PacketResult {
  switch (object) {
    case 0:
    case "RESULT_NONE":
      return PacketResult.RESULT_NONE;
    case 1:
    case "SUCCESS":
      return PacketResult.SUCCESS;
    case 10:
    case "FAIL_GENERAL":
      return PacketResult.FAIL_GENERAL;
    case 11:
    case "FAIL_SHORTAGE":
      return PacketResult.FAIL_SHORTAGE;
    case 12:
    case "FAIL_NO_VALUE":
      return PacketResult.FAIL_NO_VALUE;
    case 13:
    case "FAIL_DUPLICATE_NICKNAME":
      return PacketResult.FAIL_DUPLICATE_NICKNAME;
    case 14:
    case "FAIL_CHARACTER_NICKNAME_LENGTH_SHORTAGE":
      return PacketResult.FAIL_CHARACTER_NICKNAME_LENGTH_SHORTAGE;
    case 15:
    case "FAIL_CHARACTER_NICKNAME_LENGTH_OVER":
      return PacketResult.FAIL_CHARACTER_NICKNAME_LENGTH_OVER;
    case 16:
    case "FAIL_CHATACTER_CLASS":
      return PacketResult.FAIL_CHATACTER_CLASS;
    case 17:
    case "FAIL_CHARACTER_BAD_NICKNAME":
      return PacketResult.FAIL_CHARACTER_BAD_NICKNAME;
    case 18:
    case "FAIL_CHARACTER_MAX_COUNT":
      return PacketResult.FAIL_CHARACTER_MAX_COUNT;
    case 25:
    case "FAIL_PARTY_INVITE_OFFLINE_CHARACTER":
      return PacketResult.FAIL_PARTY_INVITE_OFFLINE_CHARACTER;
    case 26:
    case "FAIL_PARTY_INVITE_NO_LOBBY_CHARACTER":
      return PacketResult.FAIL_PARTY_INVITE_NO_LOBBY_CHARACTER;
    case 27:
    case "FAIL_PARTY_INVITE_ALREADY_PARTY":
      return PacketResult.FAIL_PARTY_INVITE_ALREADY_PARTY;
    case 28:
    case "FAIL_PARTY_INVITE_MEMBER_FULL":
      return PacketResult.FAIL_PARTY_INVITE_MEMBER_FULL;
    case 30:
    case "FAIL_EXIT_PARTY_NO_PARTY":
      return PacketResult.FAIL_EXIT_PARTY_NO_PARTY;
    case 31:
    case "FAIL_EXIT_ALREADY_GAME_START_PARTY":
      return PacketResult.FAIL_EXIT_ALREADY_GAME_START_PARTY;
    case 32:
    case "FAIL_PARTY_INVITE_ANSWER_DECLINED":
      return PacketResult.FAIL_PARTY_INVITE_ANSWER_DECLINED;
    case 33:
    case "FAIL_PARTY_TARGET_BLOCK_CHARACTER":
      return PacketResult.FAIL_PARTY_TARGET_BLOCK_CHARACTER;
    case 34:
    case "FAIL_PARTY_YOU_BLOCKED_CHARACTER":
      return PacketResult.FAIL_PARTY_YOU_BLOCKED_CHARACTER;
    case 35:
    case "FAIL_PARTY_DUPLICATE_REQUEST":
      return PacketResult.FAIL_PARTY_DUPLICATE_REQUEST;
    case 36:
    case "FAIL_PARTY_INVITE_TARGET_TRADING":
      return PacketResult.FAIL_PARTY_INVITE_TARGET_TRADING;
    case 37:
    case "FAIL_PARTY_CHAT_NO_PARTY":
      return PacketResult.FAIL_PARTY_CHAT_NO_PARTY;
    case 38:
    case "FAIL_PARTY_IS_MATCHING":
      return PacketResult.FAIL_PARTY_IS_MATCHING;
    case 39:
    case "FAIL_PARTY_READY_SHORTAGE_ENTRANCE_FEE":
      return PacketResult.FAIL_PARTY_READY_SHORTAGE_ENTRANCE_FEE;
    case 40:
    case "FAIL_PARTY_READY_SHORTAGE_ENTRANCE_LEVEL":
      return PacketResult.FAIL_PARTY_READY_SHORTAGE_ENTRANCE_LEVEL;
    case 50:
    case "FAIL_CHARACTER_SELECT_ENTER_IS_MATCHING":
      return PacketResult.FAIL_CHARACTER_SELECT_ENTER_IS_MATCHING;
    case 51:
    case "FAIL_CHARACTER_SELECT_ENTER_NOT_LOBBY":
      return PacketResult.FAIL_CHARACTER_SELECT_ENTER_NOT_LOBBY;
    case 55:
    case "FAIL_PARTY_READY_IS_MATCHING":
      return PacketResult.FAIL_PARTY_READY_IS_MATCHING;
    case 60:
    case "FAIL_MERCHANT_NO_OPEN":
      return PacketResult.FAIL_MERCHANT_NO_OPEN;
    case 100:
    case "FAIL_CLASS_NOT_FOUND_OLD_ITEM":
      return PacketResult.FAIL_CLASS_NOT_FOUND_OLD_ITEM;
    case 101:
    case "FAIL_CLASS_NOT_FOUND_NEW_ITEM":
      return PacketResult.FAIL_CLASS_NOT_FOUND_NEW_ITEM;
    case 102:
    case "FAIL_CLASS_NEW_ITEM_CONDITION":
      return PacketResult.FAIL_CLASS_NEW_ITEM_CONDITION;
    case 103:
    case "FAIL_CLASS_SWAP":
      return PacketResult.FAIL_CLASS_SWAP;
    case 104:
    case "FAIL_CLASS_EQUIP_WEAPON_MASTERY_OLD_ITEM":
      return PacketResult.FAIL_CLASS_EQUIP_WEAPON_MASTERY_OLD_ITEM;
    case 105:
    case "FAIL_CLASS_NOT_FOUND_SPELL_ITEM":
      return PacketResult.FAIL_CLASS_NOT_FOUND_SPELL_ITEM;
    case 106:
    case "FAIL_CLASS_DUPLICATE_EQUIP_SPELL_ITEM":
      return PacketResult.FAIL_CLASS_DUPLICATE_EQUIP_SPELL_ITEM;
    case 130:
    case "FAIL_CHAT_MAX_ROOM_USER":
      return PacketResult.FAIL_CHAT_MAX_ROOM_USER;
    case 131:
    case "FAIL_CHAT_SELECT_ALREADY_ROOM":
      return PacketResult.FAIL_CHAT_SELECT_ALREADY_ROOM;
    case 132:
    case "FAIL_CHAT_SELECT_NOT_MEMBERSHIP":
      return PacketResult.FAIL_CHAT_SELECT_NOT_MEMBERSHIP;
    case 133:
    case "FAIL_CHAT_SELECT_NOT_EXISTS_ROOM":
      return PacketResult.FAIL_CHAT_SELECT_NOT_EXISTS_ROOM;
    case 134:
    case "FAIL_CHAT_WHISPER_NOT_FOUND_USER":
      return PacketResult.FAIL_CHAT_WHISPER_NOT_FOUND_USER;
    case 140:
    case "FAIL_CHAT_EXIT_NOT_EXISTS_ROOM":
      return PacketResult.FAIL_CHAT_EXIT_NOT_EXISTS_ROOM;
    case 141:
    case "FAIL_CHAT_EXIT_CANNOT_LEAVE_DURING_TRADE":
      return PacketResult.FAIL_CHAT_EXIT_CANNOT_LEAVE_DURING_TRADE;
    case 150:
    case "FAIL_TRADE_REQUIREMENT_SHORTAGE_LV":
      return PacketResult.FAIL_TRADE_REQUIREMENT_SHORTAGE_LV;
    case 151:
    case "FAIL_TRADE_REQUIREMENT_SHORTAGE_GOLD":
      return PacketResult.FAIL_TRADE_REQUIREMENT_SHORTAGE_GOLD;
    case 152:
    case "FAIL_TRADE_ALREADY_MEMBERSHIP":
      return PacketResult.FAIL_TRADE_ALREADY_MEMBERSHIP;
    case 153:
    case "FAIL_TRADE_TARGET_BLOCK":
      return PacketResult.FAIL_TRADE_TARGET_BLOCK;
    case 154:
    case "FAIL_TRADE_DUPLICATE_REQUEST":
      return PacketResult.FAIL_TRADE_DUPLICATE_REQUEST;
    case 155:
    case "FAIL_TRADE_REQUEST_NOT_FOUND_CHANNEL":
      return PacketResult.FAIL_TRADE_REQUEST_NOT_FOUND_CHANNEL;
    case 156:
    case "FAIL_TRADE_ANSWER_NO_CHANNEL":
      return PacketResult.FAIL_TRADE_ANSWER_NO_CHANNEL;
    case 161:
    case "FAIL_TRADING_NOT_FOUND_USER":
      return PacketResult.FAIL_TRADING_NOT_FOUND_USER;
    case 162:
    case "FAIL_TRADING_ALREADY_TRADING":
      return PacketResult.FAIL_TRADING_ALREADY_TRADING;
    case 163:
    case "FAIL_TRADING_NO_MEMBERSHIP":
      return PacketResult.FAIL_TRADING_NO_MEMBERSHIP;
    case 164:
    case "FAIL_TRADING_SHORTAGE_MINE_GOLD":
      return PacketResult.FAIL_TRADING_SHORTAGE_MINE_GOLD;
    case 165:
    case "FAIL_TRADING_SHORTAGE_TARGET_GOLD":
      return PacketResult.FAIL_TRADING_SHORTAGE_TARGET_GOLD;
    case 166:
    case "FAIL_TRADING_INGAME_TARGET":
      return PacketResult.FAIL_TRADING_INGAME_TARGET;
    case 167:
    case "FAIL_TRADING_NOT_FOUND_ITEM":
      return PacketResult.FAIL_TRADING_NOT_FOUND_ITEM;
    case 168:
    case "FAIL_TRADING_ALREADY_ITEM":
      return PacketResult.FAIL_TRADING_ALREADY_ITEM;
    case 169:
    case "FAIL_TRADING_NOT_FOUND_EMPTY_SLOT":
      return PacketResult.FAIL_TRADING_NOT_FOUND_EMPTY_SLOT;
    case 170:
    case "FAIL_TRADING_READY_SHORTAGE_GOLD":
      return PacketResult.FAIL_TRADING_READY_SHORTAGE_GOLD;
    case 171:
    case "FAIL_TRADING_NOT_FOUND_EMPTY_INVENTORY_SLOT":
      return PacketResult.FAIL_TRADING_NOT_FOUND_EMPTY_INVENTORY_SLOT;
    case 180:
    case "FAIL_BLOCK_CHARACTER_ALREADY":
      return PacketResult.FAIL_BLOCK_CHARACTER_ALREADY;
    case 181:
    case "FAIL_BLOCK_CHARACTER_LIMIT":
      return PacketResult.FAIL_BLOCK_CHARACTER_LIMIT;
    case 182:
    case "FAIL_BLOCK_CHARACTER_NOT_FOUND":
      return PacketResult.FAIL_BLOCK_CHARACTER_NOT_FOUND;
    case 183:
    case "FAIL_UNBLOCK_CHARACTER_NOT_FOUND":
      return PacketResult.FAIL_UNBLOCK_CHARACTER_NOT_FOUND;
    case 190:
    case "FAIL_CHAT_NOT_FOUND_USER":
      return PacketResult.FAIL_CHAT_NOT_FOUND_USER;
    case 201:
    case "FAIL_FRIEND_FIND_NOT_FOUND":
      return PacketResult.FAIL_FRIEND_FIND_NOT_FOUND;
    case 250:
    case "FAIL_CUSTOMIZE_NOT_FOUND_ITEM":
      return PacketResult.FAIL_CUSTOMIZE_NOT_FOUND_ITEM;
    case 251:
    case "FAIL_CUSTOMIZE_UNEQUIPPED_CLASS":
      return PacketResult.FAIL_CUSTOMIZE_UNEQUIPPED_CLASS;
    case 252:
    case "FAIL_CUSTOMIZE_NO_MOUNTING_SLOT_AVAILABLE":
      return PacketResult.FAIL_CUSTOMIZE_NO_MOUNTING_SLOT_AVAILABLE;
    case 253:
    case "FAIL_CUSTOMIZE_MAXIMUM_LIMIT":
      return PacketResult.FAIL_CUSTOMIZE_MAXIMUM_LIMIT;
    case 270:
    case "FAIL_SHOP_ALREADY_ITEM":
      return PacketResult.FAIL_SHOP_ALREADY_ITEM;
    case 271:
    case "FAIL_SHOP_ITEM_SHORTAGE_CURRENCY":
      return PacketResult.FAIL_SHOP_ITEM_SHORTAGE_CURRENCY;
    case 300:
    case "FAIL_KARMA_NOT_FOUND_USER":
      return PacketResult.FAIL_KARMA_NOT_FOUND_USER;
    case 301:
    case "FAIL_KARMA_SHORTAGE_TICKET_COUNT":
      return PacketResult.FAIL_KARMA_SHORTAGE_TICKET_COUNT;
    case 302:
    case "FAIL_KARMA_IMPOSSIBLE_ACTION":
      return PacketResult.FAIL_KARMA_IMPOSSIBLE_ACTION;
    case 303:
    case "FAIL_KARMA_ALREADY_VOTES":
      return PacketResult.FAIL_KARMA_ALREADY_VOTES;
    case 304:
    case "FAIL_KARMA_BAD_CHARACTER_IMPOSSIBLE_VOTE":
      return PacketResult.FAIL_KARMA_BAD_CHARACTER_IMPOSSIBLE_VOTE;
    case 320:
    case "FAIL_GATHERING_HALL_NOT_FOUND_USER":
      return PacketResult.FAIL_GATHERING_HALL_NOT_FOUND_USER;
    case 500:
    case "FAIL_ENTER_GAME_SPECTATOR_NOT_PLAY_GAME":
      return PacketResult.FAIL_ENTER_GAME_SPECTATOR_NOT_PLAY_GAME;
    case 501:
    case "FAIL_ENTER_GAME_SPECTATOR_NOT_FOUND_USER":
      return PacketResult.FAIL_ENTER_GAME_SPECTATOR_NOT_FOUND_USER;
    case 502:
    case "FAIL_NOT_GM":
      return PacketResult.FAIL_NOT_GM;
    case 550:
    case "FAIL_LOBBY_ENTER_COUPON_CODE_INVALID":
      return PacketResult.FAIL_LOBBY_ENTER_COUPON_CODE_INVALID;
    case 551:
    case "FAIL_LOBBY_ENTER_COUPON_CODE_ALREADY":
      return PacketResult.FAIL_LOBBY_ENTER_COUPON_CODE_ALREADY;
    case 552:
    case "FAIL_LOBBY_ENTER_COUPON_CODE_NOT_VALID_TIME":
      return PacketResult.FAIL_LOBBY_ENTER_COUPON_CODE_NOT_VALID_TIME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PacketResult.UNRECOGNIZED;
  }
}

export function packetResultToJSON(object: PacketResult): string {
  switch (object) {
    case PacketResult.RESULT_NONE:
      return "RESULT_NONE";
    case PacketResult.SUCCESS:
      return "SUCCESS";
    case PacketResult.FAIL_GENERAL:
      return "FAIL_GENERAL";
    case PacketResult.FAIL_SHORTAGE:
      return "FAIL_SHORTAGE";
    case PacketResult.FAIL_NO_VALUE:
      return "FAIL_NO_VALUE";
    case PacketResult.FAIL_DUPLICATE_NICKNAME:
      return "FAIL_DUPLICATE_NICKNAME";
    case PacketResult.FAIL_CHARACTER_NICKNAME_LENGTH_SHORTAGE:
      return "FAIL_CHARACTER_NICKNAME_LENGTH_SHORTAGE";
    case PacketResult.FAIL_CHARACTER_NICKNAME_LENGTH_OVER:
      return "FAIL_CHARACTER_NICKNAME_LENGTH_OVER";
    case PacketResult.FAIL_CHATACTER_CLASS:
      return "FAIL_CHATACTER_CLASS";
    case PacketResult.FAIL_CHARACTER_BAD_NICKNAME:
      return "FAIL_CHARACTER_BAD_NICKNAME";
    case PacketResult.FAIL_CHARACTER_MAX_COUNT:
      return "FAIL_CHARACTER_MAX_COUNT";
    case PacketResult.FAIL_PARTY_INVITE_OFFLINE_CHARACTER:
      return "FAIL_PARTY_INVITE_OFFLINE_CHARACTER";
    case PacketResult.FAIL_PARTY_INVITE_NO_LOBBY_CHARACTER:
      return "FAIL_PARTY_INVITE_NO_LOBBY_CHARACTER";
    case PacketResult.FAIL_PARTY_INVITE_ALREADY_PARTY:
      return "FAIL_PARTY_INVITE_ALREADY_PARTY";
    case PacketResult.FAIL_PARTY_INVITE_MEMBER_FULL:
      return "FAIL_PARTY_INVITE_MEMBER_FULL";
    case PacketResult.FAIL_EXIT_PARTY_NO_PARTY:
      return "FAIL_EXIT_PARTY_NO_PARTY";
    case PacketResult.FAIL_EXIT_ALREADY_GAME_START_PARTY:
      return "FAIL_EXIT_ALREADY_GAME_START_PARTY";
    case PacketResult.FAIL_PARTY_INVITE_ANSWER_DECLINED:
      return "FAIL_PARTY_INVITE_ANSWER_DECLINED";
    case PacketResult.FAIL_PARTY_TARGET_BLOCK_CHARACTER:
      return "FAIL_PARTY_TARGET_BLOCK_CHARACTER";
    case PacketResult.FAIL_PARTY_YOU_BLOCKED_CHARACTER:
      return "FAIL_PARTY_YOU_BLOCKED_CHARACTER";
    case PacketResult.FAIL_PARTY_DUPLICATE_REQUEST:
      return "FAIL_PARTY_DUPLICATE_REQUEST";
    case PacketResult.FAIL_PARTY_INVITE_TARGET_TRADING:
      return "FAIL_PARTY_INVITE_TARGET_TRADING";
    case PacketResult.FAIL_PARTY_CHAT_NO_PARTY:
      return "FAIL_PARTY_CHAT_NO_PARTY";
    case PacketResult.FAIL_PARTY_IS_MATCHING:
      return "FAIL_PARTY_IS_MATCHING";
    case PacketResult.FAIL_PARTY_READY_SHORTAGE_ENTRANCE_FEE:
      return "FAIL_PARTY_READY_SHORTAGE_ENTRANCE_FEE";
    case PacketResult.FAIL_PARTY_READY_SHORTAGE_ENTRANCE_LEVEL:
      return "FAIL_PARTY_READY_SHORTAGE_ENTRANCE_LEVEL";
    case PacketResult.FAIL_CHARACTER_SELECT_ENTER_IS_MATCHING:
      return "FAIL_CHARACTER_SELECT_ENTER_IS_MATCHING";
    case PacketResult.FAIL_CHARACTER_SELECT_ENTER_NOT_LOBBY:
      return "FAIL_CHARACTER_SELECT_ENTER_NOT_LOBBY";
    case PacketResult.FAIL_PARTY_READY_IS_MATCHING:
      return "FAIL_PARTY_READY_IS_MATCHING";
    case PacketResult.FAIL_MERCHANT_NO_OPEN:
      return "FAIL_MERCHANT_NO_OPEN";
    case PacketResult.FAIL_CLASS_NOT_FOUND_OLD_ITEM:
      return "FAIL_CLASS_NOT_FOUND_OLD_ITEM";
    case PacketResult.FAIL_CLASS_NOT_FOUND_NEW_ITEM:
      return "FAIL_CLASS_NOT_FOUND_NEW_ITEM";
    case PacketResult.FAIL_CLASS_NEW_ITEM_CONDITION:
      return "FAIL_CLASS_NEW_ITEM_CONDITION";
    case PacketResult.FAIL_CLASS_SWAP:
      return "FAIL_CLASS_SWAP";
    case PacketResult.FAIL_CLASS_EQUIP_WEAPON_MASTERY_OLD_ITEM:
      return "FAIL_CLASS_EQUIP_WEAPON_MASTERY_OLD_ITEM";
    case PacketResult.FAIL_CLASS_NOT_FOUND_SPELL_ITEM:
      return "FAIL_CLASS_NOT_FOUND_SPELL_ITEM";
    case PacketResult.FAIL_CLASS_DUPLICATE_EQUIP_SPELL_ITEM:
      return "FAIL_CLASS_DUPLICATE_EQUIP_SPELL_ITEM";
    case PacketResult.FAIL_CHAT_MAX_ROOM_USER:
      return "FAIL_CHAT_MAX_ROOM_USER";
    case PacketResult.FAIL_CHAT_SELECT_ALREADY_ROOM:
      return "FAIL_CHAT_SELECT_ALREADY_ROOM";
    case PacketResult.FAIL_CHAT_SELECT_NOT_MEMBERSHIP:
      return "FAIL_CHAT_SELECT_NOT_MEMBERSHIP";
    case PacketResult.FAIL_CHAT_SELECT_NOT_EXISTS_ROOM:
      return "FAIL_CHAT_SELECT_NOT_EXISTS_ROOM";
    case PacketResult.FAIL_CHAT_WHISPER_NOT_FOUND_USER:
      return "FAIL_CHAT_WHISPER_NOT_FOUND_USER";
    case PacketResult.FAIL_CHAT_EXIT_NOT_EXISTS_ROOM:
      return "FAIL_CHAT_EXIT_NOT_EXISTS_ROOM";
    case PacketResult.FAIL_CHAT_EXIT_CANNOT_LEAVE_DURING_TRADE:
      return "FAIL_CHAT_EXIT_CANNOT_LEAVE_DURING_TRADE";
    case PacketResult.FAIL_TRADE_REQUIREMENT_SHORTAGE_LV:
      return "FAIL_TRADE_REQUIREMENT_SHORTAGE_LV";
    case PacketResult.FAIL_TRADE_REQUIREMENT_SHORTAGE_GOLD:
      return "FAIL_TRADE_REQUIREMENT_SHORTAGE_GOLD";
    case PacketResult.FAIL_TRADE_ALREADY_MEMBERSHIP:
      return "FAIL_TRADE_ALREADY_MEMBERSHIP";
    case PacketResult.FAIL_TRADE_TARGET_BLOCK:
      return "FAIL_TRADE_TARGET_BLOCK";
    case PacketResult.FAIL_TRADE_DUPLICATE_REQUEST:
      return "FAIL_TRADE_DUPLICATE_REQUEST";
    case PacketResult.FAIL_TRADE_REQUEST_NOT_FOUND_CHANNEL:
      return "FAIL_TRADE_REQUEST_NOT_FOUND_CHANNEL";
    case PacketResult.FAIL_TRADE_ANSWER_NO_CHANNEL:
      return "FAIL_TRADE_ANSWER_NO_CHANNEL";
    case PacketResult.FAIL_TRADING_NOT_FOUND_USER:
      return "FAIL_TRADING_NOT_FOUND_USER";
    case PacketResult.FAIL_TRADING_ALREADY_TRADING:
      return "FAIL_TRADING_ALREADY_TRADING";
    case PacketResult.FAIL_TRADING_NO_MEMBERSHIP:
      return "FAIL_TRADING_NO_MEMBERSHIP";
    case PacketResult.FAIL_TRADING_SHORTAGE_MINE_GOLD:
      return "FAIL_TRADING_SHORTAGE_MINE_GOLD";
    case PacketResult.FAIL_TRADING_SHORTAGE_TARGET_GOLD:
      return "FAIL_TRADING_SHORTAGE_TARGET_GOLD";
    case PacketResult.FAIL_TRADING_INGAME_TARGET:
      return "FAIL_TRADING_INGAME_TARGET";
    case PacketResult.FAIL_TRADING_NOT_FOUND_ITEM:
      return "FAIL_TRADING_NOT_FOUND_ITEM";
    case PacketResult.FAIL_TRADING_ALREADY_ITEM:
      return "FAIL_TRADING_ALREADY_ITEM";
    case PacketResult.FAIL_TRADING_NOT_FOUND_EMPTY_SLOT:
      return "FAIL_TRADING_NOT_FOUND_EMPTY_SLOT";
    case PacketResult.FAIL_TRADING_READY_SHORTAGE_GOLD:
      return "FAIL_TRADING_READY_SHORTAGE_GOLD";
    case PacketResult.FAIL_TRADING_NOT_FOUND_EMPTY_INVENTORY_SLOT:
      return "FAIL_TRADING_NOT_FOUND_EMPTY_INVENTORY_SLOT";
    case PacketResult.FAIL_BLOCK_CHARACTER_ALREADY:
      return "FAIL_BLOCK_CHARACTER_ALREADY";
    case PacketResult.FAIL_BLOCK_CHARACTER_LIMIT:
      return "FAIL_BLOCK_CHARACTER_LIMIT";
    case PacketResult.FAIL_BLOCK_CHARACTER_NOT_FOUND:
      return "FAIL_BLOCK_CHARACTER_NOT_FOUND";
    case PacketResult.FAIL_UNBLOCK_CHARACTER_NOT_FOUND:
      return "FAIL_UNBLOCK_CHARACTER_NOT_FOUND";
    case PacketResult.FAIL_CHAT_NOT_FOUND_USER:
      return "FAIL_CHAT_NOT_FOUND_USER";
    case PacketResult.FAIL_FRIEND_FIND_NOT_FOUND:
      return "FAIL_FRIEND_FIND_NOT_FOUND";
    case PacketResult.FAIL_CUSTOMIZE_NOT_FOUND_ITEM:
      return "FAIL_CUSTOMIZE_NOT_FOUND_ITEM";
    case PacketResult.FAIL_CUSTOMIZE_UNEQUIPPED_CLASS:
      return "FAIL_CUSTOMIZE_UNEQUIPPED_CLASS";
    case PacketResult.FAIL_CUSTOMIZE_NO_MOUNTING_SLOT_AVAILABLE:
      return "FAIL_CUSTOMIZE_NO_MOUNTING_SLOT_AVAILABLE";
    case PacketResult.FAIL_CUSTOMIZE_MAXIMUM_LIMIT:
      return "FAIL_CUSTOMIZE_MAXIMUM_LIMIT";
    case PacketResult.FAIL_SHOP_ALREADY_ITEM:
      return "FAIL_SHOP_ALREADY_ITEM";
    case PacketResult.FAIL_SHOP_ITEM_SHORTAGE_CURRENCY:
      return "FAIL_SHOP_ITEM_SHORTAGE_CURRENCY";
    case PacketResult.FAIL_KARMA_NOT_FOUND_USER:
      return "FAIL_KARMA_NOT_FOUND_USER";
    case PacketResult.FAIL_KARMA_SHORTAGE_TICKET_COUNT:
      return "FAIL_KARMA_SHORTAGE_TICKET_COUNT";
    case PacketResult.FAIL_KARMA_IMPOSSIBLE_ACTION:
      return "FAIL_KARMA_IMPOSSIBLE_ACTION";
    case PacketResult.FAIL_KARMA_ALREADY_VOTES:
      return "FAIL_KARMA_ALREADY_VOTES";
    case PacketResult.FAIL_KARMA_BAD_CHARACTER_IMPOSSIBLE_VOTE:
      return "FAIL_KARMA_BAD_CHARACTER_IMPOSSIBLE_VOTE";
    case PacketResult.FAIL_GATHERING_HALL_NOT_FOUND_USER:
      return "FAIL_GATHERING_HALL_NOT_FOUND_USER";
    case PacketResult.FAIL_ENTER_GAME_SPECTATOR_NOT_PLAY_GAME:
      return "FAIL_ENTER_GAME_SPECTATOR_NOT_PLAY_GAME";
    case PacketResult.FAIL_ENTER_GAME_SPECTATOR_NOT_FOUND_USER:
      return "FAIL_ENTER_GAME_SPECTATOR_NOT_FOUND_USER";
    case PacketResult.FAIL_NOT_GM:
      return "FAIL_NOT_GM";
    case PacketResult.FAIL_LOBBY_ENTER_COUPON_CODE_INVALID:
      return "FAIL_LOBBY_ENTER_COUPON_CODE_INVALID";
    case PacketResult.FAIL_LOBBY_ENTER_COUPON_CODE_ALREADY:
      return "FAIL_LOBBY_ENTER_COUPON_CODE_ALREADY";
    case PacketResult.FAIL_LOBBY_ENTER_COUPON_CODE_NOT_VALID_TIME:
      return "FAIL_LOBBY_ENTER_COUPON_CODE_NOT_VALID_TIME";
    case PacketResult.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface sc2sAliveReq {
}

export interface ss2cAliveRes {
}

export interface sc2sReconnectReq {
}

export interface ss2cReconnectRes {
  result: number;
}

export interface ss2cConnectServiceInfoJson {
  ipAddress: string;
  port: number;
}

function createBasesc2sAliveReq(): sc2sAliveReq {
  return {};
}

export const sc2sAliveReq = {
  encode(_: sc2sAliveReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): sc2sAliveReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasesc2sAliveReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): sc2sAliveReq {
    return {};
  },

  toJSON(_: sc2sAliveReq): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<sc2sAliveReq>, I>>(base?: I): sc2sAliveReq {
    return sc2sAliveReq.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<sc2sAliveReq>, I>>(_: I): sc2sAliveReq {
    const message = createBasesc2sAliveReq();
    return message;
  },
};

function createBasess2cAliveRes(): ss2cAliveRes {
  return {};
}

export const ss2cAliveRes = {
  encode(_: ss2cAliveRes, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ss2cAliveRes {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasess2cAliveRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ss2cAliveRes {
    return {};
  },

  toJSON(_: ss2cAliveRes): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ss2cAliveRes>, I>>(base?: I): ss2cAliveRes {
    return ss2cAliveRes.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ss2cAliveRes>, I>>(_: I): ss2cAliveRes {
    const message = createBasess2cAliveRes();
    return message;
  },
};

function createBasesc2sReconnectReq(): sc2sReconnectReq {
  return {};
}

export const sc2sReconnectReq = {
  encode(_: sc2sReconnectReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): sc2sReconnectReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasesc2sReconnectReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): sc2sReconnectReq {
    return {};
  },

  toJSON(_: sc2sReconnectReq): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<sc2sReconnectReq>, I>>(base?: I): sc2sReconnectReq {
    return sc2sReconnectReq.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<sc2sReconnectReq>, I>>(_: I): sc2sReconnectReq {
    const message = createBasesc2sReconnectReq();
    return message;
  },
};

function createBasess2cReconnectRes(): ss2cReconnectRes {
  return { result: 0 };
}

export const ss2cReconnectRes = {
  encode(message: ss2cReconnectRes, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.result !== 0) {
      writer.uint32(8).uint32(message.result);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ss2cReconnectRes {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasess2cReconnectRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.result = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ss2cReconnectRes {
    return { result: isSet(object.result) ? Number(object.result) : 0 };
  },

  toJSON(message: ss2cReconnectRes): unknown {
    const obj: any = {};
    message.result !== undefined && (obj.result = Math.round(message.result));
    return obj;
  },

  create<I extends Exact<DeepPartial<ss2cReconnectRes>, I>>(base?: I): ss2cReconnectRes {
    return ss2cReconnectRes.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ss2cReconnectRes>, I>>(object: I): ss2cReconnectRes {
    const message = createBasess2cReconnectRes();
    message.result = object.result ?? 0;
    return message;
  },
};

function createBasess2cConnectServiceInfoJson(): ss2cConnectServiceInfoJson {
  return { ipAddress: "", port: 0 };
}

export const ss2cConnectServiceInfoJson = {
  encode(message: ss2cConnectServiceInfoJson, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ipAddress !== "") {
      writer.uint32(10).string(message.ipAddress);
    }
    if (message.port !== 0) {
      writer.uint32(16).uint32(message.port);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ss2cConnectServiceInfoJson {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasess2cConnectServiceInfoJson();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.port = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ss2cConnectServiceInfoJson {
    return {
      ipAddress: isSet(object.ipAddress) ? String(object.ipAddress) : "",
      port: isSet(object.port) ? Number(object.port) : 0,
    };
  },

  toJSON(message: ss2cConnectServiceInfoJson): unknown {
    const obj: any = {};
    message.ipAddress !== undefined && (obj.ipAddress = message.ipAddress);
    message.port !== undefined && (obj.port = Math.round(message.port));
    return obj;
  },

  create<I extends Exact<DeepPartial<ss2cConnectServiceInfoJson>, I>>(base?: I): ss2cConnectServiceInfoJson {
    return ss2cConnectServiceInfoJson.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ss2cConnectServiceInfoJson>, I>>(object: I): ss2cConnectServiceInfoJson {
    const message = createBasess2cConnectServiceInfoJson();
    message.ipAddress = object.ipAddress ?? "";
    message.port = object.port ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
