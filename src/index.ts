import net from "net";
import "./helloWorld";
import { scopedLogger } from "./utils/FileLogger";
import { PacketRecognizer } from "./lib/PacketRecognizer";
import { PacketIds } from "./lib/packets/AllPackets";
import cuid from "cuid";

// const FIRST_CONNECTION = ["08", "00", "00", "00", "01", "00", "02", "00"];

const packetRecognizer = PacketRecognizer.getInstance();

const sendPacket = (socket: net.Socket, packet: Buffer) => {
    // b"\x1e\x00\x00\x00\x0c\x00\x00\x00"
    const header = [0x1e, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00];

    const packetToSend = Buffer.from([...header, ...packet]);

    socket.write(packetToSend);
};

const tcpServer = net.createServer((socket) => {
    //
    let clientId = cuid();
    let dataNumber = 0;

    //
    console.log(`${clientId} client connected`);

    socket.on("end", () => {
        console.log("client disconnected");
    });

    socket.on("error", (err) => {
        console.log("client error", err);
    });

    socket.on("data", (data) => {
        let keepAliveNumber = 0;
        console.log("\n\nClient Data Received");

        //
        dataNumber++;
        const logger = scopedLogger(`${clientId}/${dataNumber}`);

        // show every hex byte
        const hex = data.toString("hex");

        const dataArr: any[] = [];
        for (let i = 0; i < hex.length; i += 2) {
            dataArr.push(hex.substr(i, 2));
        }

        // ASCII
        // console.log(`Length: ${data.length}`);
        // console.log("ASCII\n", data.toString("ascii"));
        console.log("HEX:\n", dataArr.join(" "));
        logger.log(data.toString("ascii"));

        const [packet_type, packet_impl] = packetRecognizer.recognize(data);
        console.log("Packet Type:", packet_type);

        if (!packet_impl) {
            // console.log(`Unknown Packet Type: ${packet_type}`);
            return;
        }

        if (packet_type === PacketIds["keep-alive"]) {
            const parsed = packet_impl.parse(data);

            console.log({
                type: packet_impl.id,
                increment: parsed.increment,
            });

            const hexArray = [
                0x08,
                0x00,
                0x00,
                0x00,
                0x02,
                0x00,
                parseInt(`${keepAliveNumber++}`, 16),
                0x00,
            ];
            const buffer = Buffer.from(hexArray);
            sendPacket(socket, buffer);
        }

        if (packet_type === PacketIds.login) {
            const newData = packet_impl.parse(data);

            // console.log({
            //     username: Buffer.from(newData.username).toString("ascii"),
            //     password: Buffer.from(newData.password).toString("ascii"),
            //     mac: Buffer.from(newData.mac).toString("ascii"),
            //     gameId: Buffer.from(newData.gameId).toString("ascii"),
            //     version: Buffer.from(newData.version).toString("ascii"),
            // });

            console.log("Sending Login Response Packet #1...");
            sendPacket(
                socket,
                Buffer.from(
                    "3e000000422700010a04080410320a05080110c8010a05080610f4030a05080510f4030a05080310904e0a05080210904e0a04080710460a05080810904e",
                    "hex"
                )
            );

            console.log("Sending Login Response Packet #2...");
            sendPacket(
                socket,
                Buffer.from(
                    "72 5c 43 6f 6d 70 6f 6e 65 6e 74 73 5c 58 53 70 6c 69 7447616d65536f7572636536342e646c6c0a105c57437573746f6d5f7836342e646c6c0a265c5461626c6554657874536572766963655c5461626c6554657874536572766963652e646c6c0a2a5c4d6963726f736f6674205368617265645c57696e646f7773204c6976655c574c49444e53502e444c4c0a0c5c4d6175486f6f6b2e646c6c0a255c4c4720456c656374726f6e6963735c4f6e53637265656e20436f6e74726f6c5c62696e5c0a0f5c4f574578706c6f7265722e646c6c0a2b5c737465616d617070735c636f6d6d6f6e5c4461726b20616e64204461726b657220506c6179746573745c0a1f5c415355535c47505520547765616b49495c475449492d4f53445c7836345c0a125c686579626f786c73705f7836342e646c6c0a1e5c48756453696768745c686f6f6b735c687564736967687436342e646c6c0a2c5c6f62732d706c7567696e735c77696e2d636170747572655c67726170686963732d686f6f6b36342e646c6c0a155c42616e646963616d5c626463617036342e646c6c0a1b5c4750536f6674776172655c4469726563746f7279204f7075735c0a165c486f73745c6d6564616c2d686f6f6b36342e646c6c0a0d5c5265736f757263652e646c6c0a175c576f72645374726f6b6548656c70657236342e646c6c0a1d5c417070446174615c4c6f63616c5c4469787065722053747564696f5c0a1c5c526563757273696f6e5c526563757273696f6e547261636b65725c0a145c556e696b65795c554b486f6f6b34302e646c6c0a145c455647415c507265636973696f6e20584f435c0a185c52617a65725c52617a657220436f727465785c7836345c0a1e5c436865636b506f696e745c456e64706f696e742053656375726974795c0a115c4a75737453797374656d735c41544f4b0a1a5c4d6f64756c65735c5363686564756c65644d6f64756c65735c0a0f5c5443436f6e735f7836342e646c6c0a185c54657874457874726163746f72496d706c36342e646c6c0a325c476f6f676c655c476f6f676c65204a6170616e65736520496e7075745c476f6f676c65494d454a6154495036342e646c6c"
                        .split(" ")
                        .join(""),
                    "hex"
                )
            );

            console.log("Sending Login Response Packet #3...");
            sendPacket(
                socket,
                Buffer.from(
                    "f02f7433b1e9b4b024d1d2ba08004500003afd5d400026060fe70fa475bbc0a801724ee8e2f665ca04ca2f3ec01e501801ea631b0000120000000c000000080112030a0134320134"
                        .split(" ")
                        .join(""),
                    "hex"
                )
            );
        }

        if (packet_type === PacketIds["get-character-list"]) {
            console.log("Sending Character List Packet #1...");
            sendPacket(
                socket,
                Buffer.from(
                    "d304000012000000080110011ac4090a02333012150a0746696768746572120a466967687465722331341a3444657369676e44617461506c617965724368617261637465723a49645f506c617965724368617261637465725f4669676874657220f097b4badb30280130013880a4c7bbdb3042cb0108cb81b8c2c7d801122644657369676e446174614974656d3a49645f4974656d5f436c6f746850616e74735f303030311801200328044a450a4144657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f41726d6f72526174696e6710084a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410fbffffffffffffffff0142970208c981b8c2c7d801122744657369676e446174614974656d3a49645f4974656d5f50616464656454756e69635f303030311801200328024a450a4144657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f41726d6f72526174696e67100a4a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410fbffffffffffffffff014a490a4544657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d61676963526567697374616e6365100a42cf0108cd81b8c2c7d801122144657369676e446174614974656d3a49645f4974656d5f546f7263685f303030311803200328084a4e0a4a44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f506879736963616c576561706f6e44616d616765100d4a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410f6ffffffffffffffff0142cc0108c781b8c2c7d801122744657369676e446174614974656d3a49645f4974656d5f526f756e64536869656c645f3030303118012003280b4a450a4144657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f41726d6f72526174696e67100d4a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410f4ffffffffffffffff0142d50108c581b8c2c7d801122744657369676e446174614974656d3a49645f4974656d5f41726d696e6753776f72645f3030303118012003280a4a4e0a4a44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f506879736963616c576561706f6e44616d61676510164a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410ecffffffffffffffff01",
                    "hex"
                )
            );
        }

        if (packet_type === PacketIds["create-character"]) {
            // console.log(`Parsing Create Character Data...`);
            const parsed = packet_impl.parse(data);

            console.log({
                name: Buffer.from(parsed.characterName).toString("ascii"),
                class: Buffer.from(parsed.characterClass).toString("ascii"),
                level: parsed.level,
            });

            console.log("Sending Create Character Response Packet #1...");
            sendPacket(
                socket,
                Buffer.from(
                    "6d0a000012000000080210011a970b0a02333112100a05526f6775651207526f67756523341a3244657369676e44617461506c617965724368617261637465723a49645f506c617965724368617261637465725f526f677565209895f3bbdb3028013001389895f3bbdb3042cf0108cf81bcd0c7d801122144657369676e446174614974656d3a49645f4974656d5f546f7263685f303030311803200328084a4e0a4a44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f506879736963616c576561706f6e44616d616765100d4a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410f6ffffffffffffffff0142cb0108ce81bcd0c7d801122644657369676e446174614974656d3a49645f4974656d5f436c6f746850616e74735f303030311801200328044a450a4144657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f41726d6f72526174696e6710084a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410fbffffffffffffffff01429a0208d381bcd0c7d801122544657369676e446174614974656d3a49645f4974656d5f526f677565436f776c5f303030311801200328014a450a4144657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f41726d6f72526174696e6710084a4e0a4a44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4865616473686f74526564756374696f6e4d6f6410284a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410fbffffffffffffffff0142c80108d281bcd0c7d801122344657369676e446174614974656d3a49645f4974656d5f446f75626c65745f303030311801200328024a450a4144657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f41726d6f72526174696e6710114a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410f8ffffffffffffffff0142d70108d181bcd0c7d801122944657369676e446174614974656d3a49645f4974656d5f5468726f77696e674b6e6966655f3030303118032003280e4a4e0a4a44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f506879736963616c576561706f6e44616d616765100d4a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410f6ffffffffffffffff0142d60108d081bcd0c7d801122844657369676e446174614974656d3a49645f4974656d5f526f6e64656c4461676765725f3030303118012003280a4a4e0a4a44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f506879736963616c576561706f6e44616d616765100e4a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410f6ffffff"
                        .split(" ")
                        .join(""),
                    "hex"
                )
            );

            // console.log("Sending Create Character Response Packet #2...");
            // sendPacket(
            //     socket,
            //     Buffer.from(
            //         "6d0a000012000000080210011a970b0a02333112100a05526f6775651207526f67756523341a3244657369676e44617461506c617965724368617261637465723a49645f506c617965724368617261637465725f526f677565209895f3bbdb3028013001389895f3bbdb3042cf0108cf81bcd0c7d801122144657369676e446174614974656d3a49645f4974656d5f546f7263685f303030311803200328084a4e0a4a44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f506879736963616c576561706f6e44616d616765100d4a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410f6ffffffffffffffff0142cb0108ce81bcd0c7d801122644657369676e446174614974656d3a49645f4974656d5f436c6f746850616e74735f303030311801200328044a450a4144657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f41726d6f72526174696e6710084a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410fbffffffffffffffff01429a0208d381bcd0c7d801122544657369676e446174614974656d3a49645f4974656d5f526f677565436f776c5f303030311801200328014a450a4144657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f41726d6f72526174696e6710084a4e0a4a44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4865616473686f74526564756374696f6e4d6f6410284a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410fbffffffffffffffff0142c80108d281bcd0c7d801122344657369676e446174614974656d3a49645f4974656d5f446f75626c65745f303030311801200328024a450a4144657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f41726d6f72526174696e6710114a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410f8ffffffffffffffff0142d70108d181bcd0c7d801122944657369676e446174614974656d3a49645f4974656d5f5468726f77696e674b6e6966655f3030303118032003280e4a4e0a4a44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f506879736963616c576561706f6e44616d616765100d4a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410f6ffffffffffffffff0142d60108d081bcd0c7d801122844657369676e446174614974656d3a49645f4974656d5f526f6e64656c4461676765725f3030303118012003280a4a4e0a4a44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f506879736963616c576561706f6e44616d616765100e4a4c0a3f44657369676e446174614974656d50726f7065727479547970653a49645f4974656d50726f7065727479547970655f4566666563745f4d6f7665537065656410f6ffffff"
            //             .split(" ")
            //             .join(""),
            //         "hex"
            //     )
            // );
        }
    });

    socket.pipe(socket);
});

tcpServer.on("error", (err) => {
    throw err;
});

tcpServer.listen(30001, () => {
    console.log("Starting Dark and Darker Login Server");
});
